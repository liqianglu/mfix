#!/bin/bash
#
# POST_MFIX script file for executing 'make'
# M. Syamlal/P.Nicoletti                   9-27-95
#------------------------------------------------------------------------


# set USE_NETCDF=1 if you wbant to include netCDF support
# also set NETCDF_HOME , NETCDF_INCLUDES , and NETCDF_LIBS
# to the appopraite locations inside the "if" statement below.

input=$@

#make sure we are in the post_mfix directory
POSTMFIX_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd ${POSTMFIX_DIR}

delete_files="n"

# Set the machine file to LINUX by default.
mach_file="LINUX.F"

USE_NETCDF=0

NETCDF_HOME=" "
NETCDF_INCLUDES=" "
NETCDF_LIBS=" "

echo " "

if test $USE_NETCDF = 1
then

NETCDF_HOME=/nfs/home/pnicol/software_installs/netcdf-4.0
NETCDF_INCLUDES="-I$NETCDF_HOME/fortran -I$NETCDF_HOME/f90 -I$NETCDF_HOME/f90 -I$NETCDF_HOME/libsrc"

NETCDF_LIBS="$NETCDF_HOME/libsrc/.libs/libnetcdf.a $NETCDF_HOME/f90/.libs/libnetcdff90.a"

#cp ../model/netcdf/*.fi ../model
cp ../model/netcdf/*.fi .
#dumping these files to post_mfix directory so that the self generated
#make file is able to link up to it
echo "Using netCDF"

else

#cp ../model/netcdf/noop/*.fi ../model
cp ../model/netcdf/noop/*.fi .

echo "not using netCDF"

fi

echo " "

# For compiling post_mfix the ../model directory must exist.
#
    if test -f machine.f
    then
    chmod +w machine.f
    else
    echo
    fi

    set `uname -s` ; opsys=$1
    set `uname -p` ; proctyp=$1


for arg in $input; do
  case ${arg} in
      "--compiler="*)
          opsys=$(echo ${arg} | cut -d "=" -f2)
          ;;
      "-f"|"--force")
          delete_files="y"
          ;;
  esac
done

echo "IMPORTANT: execute this makefile by typing \"sh make_post\""

#------------------------------------------------------------------------
# Flag variable for compiling with Pentium 4 specific optimization flags
# Set to 0 to avoid Pentium 4 specific optimizations
P4_OPTIMIZE=1
#
#  Check if the system is a Linux system, if yes then ask the user which
#  compiler to use
#
    if test $opsys = "Linux"
    then
      if test $proctyp = "x86_64"
      then
       echo
       echo
       echo "Linux system with 64 bit processor detected, please select compiler"
       echo
       echo "MFIX Compilation directives available for following compilers:"
       echo " - Intel Fortran Compiler (IFORT - FCE for 64 bit)"
       echo " - Portland Group Linux Fortran Compiler (pgf90)"
       echo " - PathScale compiler (pathf90)"
       echo " - gfortran"
       echo -n "Do you want to compile with Intel Compiler? (y/n) [yes] "
       read lnx_compiler
       case $lnx_compiler in
            y|Y )
                 echo " "
                 echo "Intel Compiler selected"
                 opsys="Linux_64_intel"
                 ;;

            n|N )
                 echo -n "Do you want to compile with Portland Group Compiler? (y/n) [yes] "
                 read lnx_compiler
                 case $lnx_compiler in
                      n|N )
                           echo -n "Do you want to compile with PathScale Compiler? (y/n) [yes] "
                           read lnx_compiler
                           case $lnx_compiler in
                           y|Y )
                                echo " "
                                echo "PathScale Compiler selected"
                                opsys="Linux_64_pscale"
                                ;;
                           * )
                                echo " "
                                echo "gfortran selected"
                                opsys="GFORTRAN_compile"
                                ;;
                           esac
                           ;;

                      y|Y )
                            echo " "
                            echo "Portland Group Linux Fortran Compiler selected"
                            opsys="Linux_64_pgi"
                            ;;
                     *)
                            echo " "
                            ;;
                 esac

                 ;;
           *)
               echo " "
               echo "Intel Compiler selected"
               opsys="Linux_64_intel"
               ;;
         esac



         if test $opsys = "Linux_64_pgi"
         then
           if [ "$PGI" ]
           then
              echo " "
            else
              echo "______     Environment variable ERROR          _______"
              echo "Environment variable for Portland Group is not defined !"
              echo " "
              echo "Please define the following in your shell and rerun make_mfix"
              echo " setenv PGI your_path_of_PGI_root_directory"
              exit
            fi
         fi
         if test $opsys = "Linux_64_pscale"
         then
           if [ "$PSCALE" ]
           then
              echo " "
            else
              echo "______     Environment variable ERROR          _______"
              echo "Environment variable for PathScale is not defined !"
              echo " "
              echo "Please define the following in your shell and rerun make_mfix"
              echo " setenv PSCALE your_path_of_PathScale_root_directory"
              exit
            fi
         fi
         if test $opsys = "Linux_64_intel"
         then

              echo "______    If you get 'ifort: Command not found'   _______"
              echo "IFORT environment variables are not defined"
              echo " "
              echo "Please add the following in your shell and rerun make_mfix"
              echo "for .cshrc 'source path_to_fce_9.0/bin/ifortvars.csh'"
              echo "for .kshrc or .bashrc 'source path_to_fce_9.0/bin/ifortvars.sh'"

         fi


      else

       echo
       echo
       echo "32 bit Linux system detected, please select compiler."
       echo
       echo "=============================================================="
       echo "MFIX Compilation directives available for following compilers:"
       echo "=============================================================="
       echo " [1] Portland Group Linux Fortran Compiler (pgf90)"
       echo " [2] Intel Fortran Compiler version 9.X (ifort) "
       echo " [3] gfortran"
       echo " "
       echo -n "Select the compiler to compile MFIX? [2] "
       read lnx_compiler

       case $lnx_compiler in
         1 )
           echo " "
           echo "Portland Group Linux Fortran Compiler selected"
           opsys="Linux_pgi"
           ;;
         3 )
           echo " "
           echo "gfortran"
           opsys="GFORTRAN_compile"
           ;;
         2 )
           echo " "
           echo "Intel Linux Fortran Compiler version 9.X selected"
           opsys="Linux_ifc9"
           ;;
         *)
           echo " "
           echo "Intel Linux Fortran Compiler version 9.X selected"
           opsys="Linux_ifc9"
           ;;
       esac
      fi
    else
       echo
    fi


    case $opsys in

        CYGWIN_NT-5.1   | CYGWIN_NT-6.0    | CYGWIN32_NT |    \
        CYGWIN32_NT-4.0 | GFORTRAN_compile |                  \
        MINGW32_NT-5.1)

            mach_file="LINUX.F"

            FORTRAN_CMD=gfortran
            LINK_CMD=gfortran

            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_common="-c -I. -I$mpi_include -fconvert='big-endian' -ffree-form -ffree-line-length-0 "
            compile=" -c -O -I. -fconvert='big-endian' -ffree-form -ffree-line-length-0 "
            link="  "
            MODULE_CODE=1
            ;;

        OSF1)
            mach_file="OSF1.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-omp"
            compile_d="-c -I. -I$mpi_include -C -trapuv -g -free -nowarn -assume byterecl -convert big_endian "
            link_d="-C -g -nowarn -assume byterecl -convert big_endian"

            compile="-c -I. -I$mpi_include -O5 -free -nowarn -assume byterecl -convert big_endian "
            compile2="-c -I. -I$mpi_include -O5 -free -nowarn -assume byterecl -convert big_endian "
            link="-O5 -nowarn -assume byterecl -convert big_endian"
            MODULE_CODE=1
            ;;

        AIX)
            mach_file="AIX.F"

            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpxlf90_r
                        LINK_CMD=mpxlf90_r
                ;;
              *)
                        FORTRAN_CMD=xlf90_r
                        LINK_CMD=xlf90_r
                ;;
            esac


            OBJ_EXT=o
            FORTRAN_EXT=f

#           =============================
#           use mpxlf90_r or xlf90_r
#           for thread safe code
#           =============================
            omp="-qsmp=omp -qsmp=noauto -qnosave "

#           =================================
#           the module directory cannot be on
#           a GPFS parallel file system
#           =================================

            compile_common="-c -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -c -I.  -freeform"
            compile_d="-C -g -qinitauto=FF -qflttrap -freeform $compile_common"
            link_d="$compile_d"

            compile=" -O3 -qhot -qstrict  -qarch=pwr3 -qtune=pwr3 -qcache=auto $compile_common"
            compile2="$compile"
            link="-O3 -qstrict -qarch=pwr3 -q32 -bmaxstack:2000000000 -bmaxdata:2000000000
-qtune=pwr3 -qcache=auto "

            MODULE_CODE=1
            ;;


    Linux_64_intel)
            mach_file="LINUX.F"

          #-----------
          # Decide to use mpif90 or ifort as the compiler & linker command
          #-----------
            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpif90
                        LINK_CMD=mpif90
                ;;
              *)
                        FORTRAN_CMD=ifort
                        LINK_CMD=ifort
                ;;
              esac

            OBJ_EXT=o
            FORTRAN_EXT=f
            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-openmp -assume cc_omp"
            compile_common="-c -O3 -axP -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl -FR"
            compile_d="-g -c -convert big_endian -assume byterecl -I. -FR -O0 -fpe0 -d1 -CB "
            compile_d2="-g -c -convert big_endian -assume byterecl -I. -O0 -fpe0 -d1 -CB "
            compile_d3="-g -c -convert big_endian -assume byterecl -I. -O0 -fpe0 -d1 -CB "
            link_d="-I.  "
            compile="$compile_common"
            compile2="-c -O3 -axP -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl"
            compile3="-c -O3 -axP -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl"
            link="-I.  "
            MODULE_CODE=1

            ;;


    Linux_64_pgi)
            mach_file="LINUX.F"

          #-----------
          # Decide to use mpif90 or pgf90 as the compiler & linker command
          #-----------
            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpif90
                        LINK_CMD=mpif90
                ;;
              *)
                        FORTRAN_CMD=$PGI/bin/pgf90
                        LINK_CMD=$PGI/bin/pgf90
                ;;
              esac


            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-mp"
            compile_common="-c -I. -Mnosave -Mfreeform -Mrecursive -Mreentrant -byteswapio"
            compile_d=" -g -Mbounds -Mchkptr -Mchkfpstk -Mchkstk $compile_common"            link_d=" "
            compile=" -O -Mdalign $compile_common"
            compile2="-O1 -Mdalign $compile_common"
            link="  "
            MODULE_CODE=1

            ;;


     Linux_64_pscale)
            mach_file="LINUX.F"
          #-----------
          # Decide to use mpif90 or pathf90 as the compiler & linker command
          #-----------
            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpif90
                        LINK_CMD=mpif90
                ;;
              *)
                       #FORTRAN_CMD=/usr/common//pathscale/2.1/bin/pathf90
                        FORTRAN_CMD=$PSCALE/bin/pathf90
                        LINK_CMD=$PSCALE/bin/pathf90
                ;;
            esac
            if [ "$ACML" ]
            then
              echo " "
              echo "-------------- W A R N I N G ! ----------"
              echo " You may need to update the paths under libs_d and libs "
              echo " variables in make_mfix; search for  Linux_64_pscale) text block"
              echo " with the corresponding paths on your local system if"
              echo " if you encounter problems during the link phase"
              echo "-------------- W A R N I N G ! ----------"
              echo " "
            fi
           #MPI = /usr/lib/mpi/mpi_gnu
            MPI = /usr/common/mpich/pathscale-2.1/mvapich-0.9.5

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-mp"
            compile_common_dbg="-c -I. -fno-math-errno -static-data -Wno-globals  -freeform"
            compile_common="-c -I. -O3 -OPT:Ofast -fno-math-errno -static-data -msse2 -Wno-globals -fno-second-underscore -freeform"
            compile_d=" -g $compile_common_dbg"
            compile_d2=" -g $compile_common_dbg"
            compile_d3=" -g -c -I. -fno-math-errno -static-data -Wno-globals "
            link_d=" "
            compile="$compile_common"
            compile2="$compile_common"
            compile3="-c -I. -O3 -OPT:Ofast -fno-math-errno -static-data -msse2 -Wno-globals -fno-second-underscore"
            link="  "
            MODULE_CODE=0

            ;;

    Linux_pgi)
            echo
            echo "Compiling for Linux computer (Portland group)"
            echo

            if test -f COMPILED.FOR.LINUX.PG
            then
                echo
            else
                /bin/cp -f ../model/LINUX.F machine.f
                /bin/rm -f *.o
                /bin/rm -f COMPILED.FOR.*
                touch COMPILED.FOR.LINUX.PG
            fi


            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90


            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_d="-c -Mfreeform -Mnosave -Mrecursive -Mreentrant -g -byteswapio"
            link_d="-g"
            compile="-c -Mfreeform -Mnosave -Mrecursive -Mreentrant -byteswapio"
            link=" "
            MODULE_CODE=1

            ;;



    Linux_ifc9 | Linux_ifc10 )

            if test -f COMPILED.FOR.LINUX.IFC
            then
                echo
            else
                cp ../model/LINUX_intel.F machine.f
                rm *.o
                rm COMPILED.FOR.*
                touch COMPILED.FOR.LINUX.IFC
            fi

            case $opsys in
                Linux_ifc9 )
                      FORTRAN_CMD=ifort
                      LINK_CMD="ifort -lsvml"
                      ;;
                Linux_ifc10 )
                      FORTRAN_CMD=ifort
                      LINK_CMD="ifort -lsvml"
                     ;;
                * )
                      FORTRAN_CMD=ifort
                      LINK_CMD="ifort -lsvml"
                      ;;
                esac


            OBJ_EXT=o
            FORTRAN_EXT=f


         #============================
         # Check the big endian environment variable
         #============================
            if [ "$F_UFMTENDIAN" ]
            then
               #echo "Environment variable, F_UFMTENDIAN is found"

               if ( expr "$F_UFMTENDIAN" = "big" )
               then
                 echo "*********************************************"
                 echo "Big Endian environment set for Intel compiler"
                 echo "*********************************************"
               else
                 echo "F_UFMTENDIAN environment variable  IS NOT set to big endian!"
                 echo "Check the current value of F_UFMTENDIAN variable by:"
                 echo "echo \$F_UFMTENDIAN"
                 echo "then issue the following Cshell command at the prompt and "
                 echo "recompile:"
                 echo "setenv F_UFMTENDIAN big for csh/tcsh"
                 echo "export F_UFMTENDIAN=big for ksh/bash"
                 echo " "
                 echo "Aborting compilation"
                 exit
               fi

            else  # if [ "$F_UFMTENDIAN" ] branch

              echo "Environment variable for big endian IS NOT set!"
              echo "Issue the following Cshell command at the prompt and "
              echo "then recompile:"
              echo "setenv F_UFMTENDIAN big for csh/tcsh"
              echo "export F_UFMTENDIAN=big for ksh/bash"
              echo " "
              echo "Aborting compilation"
              exit

            fi    # eof if [ "$F_UFMTENDIAN" ] branch


         #============================
         # Set the common compiler flags that are common for all three sets
         #============================
            case $opsys in
                    Linux_ifc9 )
                         compile_common="-c -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl"
                         compile_common_d="-convert big_endian -assume byterecl -O0 -fpe0 -d1 -CB -traceback"
                           ;;
                   #Linux_ifc10 )
                   #     compile_common="-c -I. -w -w95 -i_dynamic -convert big_endian -assume byterecl"
                   #     compile_common_d="-convert big_endian -assume byterecl -O0 -fpe0 -CB -traceback"
                   #       ;;
                    * )
                         compile_common="-c -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl"
                         compile_common_d="-convert big_endian -assume byterecl -O0 -fpe0 -d1 -CB -traceback"
                           ;;
            esac


         #============================
         # Set the optimization compiler flags
         #============================
          # Old Pentium 3 processors are sensitive optimization flags so set a reduced set of flags
          # that produce generic instruction set for all Pentium platforms
            if [ $P4_OPTIMIZE -eq 0 ]
            then
               case $opsys in
                  Linux_ifc9 )
                           optimize_common="-O3"
                           ;;
                 #Linux_ifc10 )
                 #         optimize_common="-O3"
                 #         ;;
                  * )
                           optimize_common="-O3"
                           ;;
                  esac
            else
               case $opsys in
                  Linux_ifc9 )
                           optimize_common="-O3 -axKW -tpp7"
                           ;;
                 #Linux_ifc10 )
                 #         #optimize_common="-fast"
                 #         optimize_common="-O3 -axW -ip -fp-model precise -ftz"
                 #         ;;
                  * )
                           optimize_common="-O3 -axKW -tpp7"
                           ;;
                  esac
            fi
         #============================
         # Set ALL debug compile flags
         #============================
            compile_d="-g -c -I. -FR $compile_common_d"
           #compile_d2="-g -c -I. -FR $compile_common_d"
           #compile_d3="-g -c -I. $compile_common_d"
            link_d="-I.  "
         #============================
         # Set ALL optimized compile flags
         #============================
            compile="$compile_common -FR $optimize_common"
            compile2="$compile_common -FR $optimize_common"
           #compile3="$compile_common $optimize_common"
            link="-I.  "

            MODULE_CODE=1
            ;;

      sn6301)
            echo
            echo "Compiling for Cray T3E"
            echo "\nPlease wait . . ."
            echo

            if test -f COMPILED.FOR.CRAYT3EF90
            then
                echo
            else
                /bin/cp -f ../model/CRAYT3E.F machine.f
                /bin/rm -f *.o
                /bin/rm -f *.a
                /bin/rm -f COMPILED.FOR.*
                touch COMPILED.FOR.CRAYT3EF90
            fi


            FORTRAN_CMD=f90
            LINK_CMD=f90

            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_d="-c -g -f free -d p -e mui -eA -O ieeeconform -M 801"
            link_d="-lapp"

            compile="-c -g -f free -d p -e mui -eA -O ieeeconform -M 801"
            compile2="-c  -g -f free -d p -e mui -eA -eZ -F -DT3E -O ieeeconform -M 801"
            link="-lapp"
            MODULE_CODE=0
            ;;

      IRIX64)
            echo
            echo "Compiling for SGI IRIX64 computer"
            echo

            if test -f COMPILED.FOR.IRIX64F90
            then
                echo
            else
                /bin/cp -f ../model/IRIXF90.F machine.f
                /bin/rm -f *.o
                /bin/rm -f *.a
                /bin/rm -f COMPILED.FOR.*
                touch COMPILED.FOR.IRIX64F90
            fi


            FORTRAN_CMD=f90
            LINK_CMD=f90

            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_d="-c -I../model -g -C -trapuv -freeform"
            link_d="-g -C -trapuv"
            compile="-c -I../model -n32 -g -freeform"
            link="-n32 -g"
            MODULE_CODE=0

            ;;

      ULTRIX)
            echo
            echo "Compiling for DEC ULTRIX computer"
            echo

            if test -f COMPILED.FOR.ULTRIX
            then
                echo
            else
                /bin/cp -f ../model/ULTRIX.F machine.f
                /bin/rm -f *.o
                /bin/rm -f *.a
                /bin/rm -f COMPILED.FOR.*
                touch COMPILED.FOR.ULTRIX
            fi


            FORTRAN_CMD=f90
            LINK_CMD=f90

            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_d="-c -g -freeform -convert big_endian"
            link_d="-g -convert big_endian"
            compile="-c -O2 -freeform -convert big_endian"
            link="-O2 -convert big_endian"
            MODULE_CODE=0

            ;;


    CYGWIN32_NT)
            echo
            echo "Compiling for NT computer (Portland group)"
            echo

            if test -f COMPILED.FOR.CYWIN32_NT.PG
            then
                echo
            else
                /bin/cp -f ../model/PGNT.F machine.f
                /bin/rm -f *.o
                /bin/rm -f COMPILED.FOR.*
                touch COMPILED.FOR.CYWIN32_NT.PG
            fi


            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90

            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_d="-c -Mfreeform -Mnosave -Mrecursive -Mreentrant -O0 -byteswapio"
            link_d=" "
            compile="-c -Mfreeform -Mnosave -Mrecursive -Mreentrant -O0 -byteswapio"
            link=" "
            MODULE_CODE=1

            ;;

    CYGWIN_NT-4.0)
            echo
            echo "Compiling for NT computer (Portland group)"
            echo

            if test -f COMPILED.FOR.CYWIN_NT-4.0.PG
            then
                echo
            else
                /bin/cp -f ../model/PGNT.F machine.f
                /bin/rm -f *.o
                /bin/rm -f COMPILED.FOR.*
                touch COMPILED.FOR.CYWIN_NT-4.0.PG
            fi


            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90

            OBJ_EXT=o
            FORTRAN_EXT=f
            compile_d="-c -Mfreeform -Mnosave -Mrecursive -Mreentrant -O0 -byteswapio"
            link_d=" "
            compile="-c -Mfreeform -Mnosave -Mrecursive -Mreentrant -O0 -byteswapio"
            link=" "
            MODULE_CODE=1

            ;;




      *) echo "no support for operating system: $opsys"
         echo
         echo "modify  make_post   to add support"
         echo
         exit ;;
   esac

echo " "

#Prepare for the current machine
    mach_check="COMPILED.WITH.$mach_file"
    if test -f $mach_check
    then
       echo
    else
       /bin/rm -f machine.f
        /bin/cp -f ../model/$mach_file machine.f
        /bin/rm -f *.o *.a *.mod *.exe
        /bin/rm -f COMPILED.WITH.*
        touch $mach_check
    fi

#
#------------------------------------------------------------------------
# delete *.o *.mod and *.a files from model directory
if test $delete_files = "n"
then
    echo -n "Object files (*.o, *.mod, *.a) in mfix/model will be deleted. Continue? (y/n) [no] "
    read delete_files
fi

case $delete_files in
    y|Y )
        echo "deleting files . . ."
        /bin/rm -f ../model/*.o ../model/*.mod ../model/*.a
        /bin/rm -f *.o *.mod
        ;;
    *)
        exit
        ;;
esac

echo
echo "Please wait . . ."

#
#------------------------------------------------------------------------
#
#  Create a backup of the function.inc in the model directory and copy the
#  function.inc from the post_mfix directory to the model directory

#      Is there default file Mfix/model directory?
       if test -r "../model/function.0inc"
       then
          do_nothing="ok"

       else
#        Mfix/model directory does not have a default file. create one.
         /bin/cp -f "../model/function.inc" "../model/function.0inc"
       fi
       /bin/cp -f "./function.inc" "../model/function.inc"

#------------------------------------------------------------------------
#
# Debug version: in the next two lines change flags to compile_d and link_d
    FORT_FLAGS="$compile"
    LINK_FLAGS="$link"
#
#

  LIB_FLAGS="$NETCDF_LIBS"

  export FORT_FLAGS
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD

 /bin/cp -f -p ../model/ep_s1.inc .
 /bin/cp -f -p ../model/ep_s2.inc .
 /bin/cp -f -p ../model/fun_avg1.inc .
 /bin/cp -f -p ../model/fun_avg2.inc .
 /bin/cp -f -p ../model/s_pr1.inc .
 /bin/cp -f -p ../model/s_pr2.inc .
 /bin/cp -f -p ../model/namelist.inc .
 /bin/cp -f -p ../model/sc_p_g1.inc .
 /bin/cp -f -p ../model/sc_p_g2.inc .
 mkdir -p des
 /bin/cp -f -p ../model/des/desnamelist.inc des/


 set `pwd`
 mfix=`echo $1 | sed 's/\/post_mfix/\/model/'`
# Write mfix/model path into the file mfix_directory_path.inc
 if grep -qs "     CHARACTER(len=132) :: MFIX_PATH = '$mfix'" mfix_directory_path.inc
 then
   echo " "
 else
   echo "     CHARACTER(len=132) :: MFIX_PATH = '$mfix'" > mfix_directory_path.inc
 fi



 if [ -d qmomk ]; then
    /bin/cp -f -p ../model/qmomk/qmomknamelist.inc qmomk/
 else
    /bin/mkdir qmomk
    /bin/cp -f -p ../model/qmomk/qmomknamelist.inc qmomk/
 fi

 case $MODULE_CODE in

      0)
         make -j -f post_u.make
         ;;

      1)
         make -j -f post_l.make
         ;;

 esac

 if test $? = 0
 then
    echo
    echo
    echo "********************************************"
    echo "* Compilation successful: post_mfix created*"
    echo "********************************************"
    echo
 else
    echo
    echo
    echo "*** File post_mfix NOT created."
    echo
 fi

# Restore the function.inc file in the model directory
  /bin/mv -f "../model/function.0inc" "../model/function.inc"

 chmod +w ep_s1.inc
 chmod +w ep_s2.inc
 chmod +w fun_avg1.inc
 chmod +w fun_avg2.inc
 chmod +w s_pr1.inc
 chmod +w s_pr2.inc
 chmod +w namelist.inc
 chmod +w sc_p_g1.inc
 chmod +w sc_p_g2.inc

 /bin/rm -f ep_s1.inc
 /bin/rm -f ep_s2.inc
 /bin/rm -f fun_avg1.inc
 /bin/rm -f fun_avg2.inc
 /bin/rm -f s_pr1.inc
 /bin/rm -f s_pr2.inc
 /bin/rm -f namelist.inc
 /bin/rm -f sc_p_g1.inc
 /bin/rm -f sc_p_g2.inc
 /bin/rm -f *.fi
