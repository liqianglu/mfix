#!/bin/bsh -f
#
# POST_MFIX script file for executing 'make'
# M. Syamlal/P.Nicoletti                   9-27-95
#------------------------------------------------------------------------


#####
###            get the arguments passed to make_post

do_debug=0
skip=0

compiler=""

input=$@

for arg in $input; do
    case ${arg} in

         "-d")
                   compiler=gfortran
                   ;;

         "-skip") 
                   skip=1;
                   ;;

         "-debug")
                   echo "using debug flags"
                   do_debug=1
                   ;;

         *) 
                   filename=config/"$arg".sh
                   echo "using : " $filename
                   if [ -f "$filename" ]
                   then
                      compiler=$arg
                      echo "using compiler : " $arg
                   else
                      echo "file not found"
                      exit
                   fi

                   ;;
    esac
done

###
#####

###
#####                     netcdf support

# set USE_NETCDF=1 if you wbant to include netCDF support
# also set NETCDF_HOME , NETCDF_INCLUDES , and NETCDF_LIBS
# to the appopraite locations inside the "if" statement below.

USE_NETCDF=0

NETCDF_HOME=" "
NETCDF_INCLUDES=" "
NETCDF_LIBS=" "

echo " "

if test $USE_NETCDF = 1
then

   NETCDF_HOME=/nfs/home/pnicol/software_installs/netcdf-4.0
   NETCDF_INCLUDES="-I$NETCDF_HOME/fortran -I$NETCDF_HOME/f90 -I$NETCDF_HOME/f90 -I$NETCDF_HOME/libsrc"

   NETCDF_LIBS="$NETCDF_HOME/libsrc/.libs/libnetcdf.a $NETCDF_HOME/f90/.libs/libnetcdff90.a"

   cp ../model/netcdf/*.fi .
   # dumping these files to post_mfix directory so that the self generated 
   # make file is able to link up to it
   echo "Using netCDF"

else

   cp ../model/netcdf/noop/*.fi . 

   echo "not using netCDF"

fi

###
###############

echo " "
 
# For compiling post_mfix the ../model directory must exist.
#
if test -f machine.f
then
    chmod +w machine.f
else
    echo
fi

set `uname -s` ; opsys=$1
set `uname -p` ; proctyp=$1

echo "IMPORTANT: execute this makefile by typing \"sh make_post\""
echo " "


if [ "$compiler" == "" ]
then
   echo " [1] Portland Group Linux Fortran Compiler (pgf90)"
   echo " [2] Intel Fortran Compiler (ifort) "
   echo " [3] gfortran"
   echo " "
   echo -n "Select the compiler to compile POST_MFIX? [3] "
   read lnx_compiler

   case $lnx_compiler in
      1 )
         echo " "
         echo "Portland Group Linux Fortran Compiler selected"
         . ./config/pgi.sh
         ;;
      2 )
         echo " "
         echo "Intel Linux Fortran Compiler selected"
         . ./config/ifort.sh
         ;;
      3 )
         echo " "
         echo "gfortran"
         . ./config/gfortran.sh
         ;;
      *)
         echo " "
         echo "gfortran"
         . ./config/gfortran.sh
         ;;
   esac

else
       . ./config/$compiler.sh
fi


#############

echo " "

#Prepare for the current machine

  chmod +w machine.f
  /bin/cp -f ../model/$mach_file machine.f

    if [ "$skip" -eq "0" ]
    then
      /bin/rm -f ../model/*.o ../model/*.mod ../model/*.a 
      /bin/rm -f *.o *.mod
    fi

  echo
  echo "Please wait . . ."

#
#------------------------------------------------------------------------
#
#  Create a backup of the function.inc in the model directory and copy the
#  function.inc from the post_mfix directory to the model directory

#      Is there default file Mfix/model directory?
       if test -r "../model/function.0inc"
       then
          do_nothing="ok"
      
       else
#        Mfix/model directory does not have a default file. create one.
         /bin/cp -f "../model/function.inc" "../model/function.0inc"
       fi
       /bin/cp -f "./function.inc" "../model/function.inc"

#------------------------------------------------------------------------

    FORT_FLAGS="$compile"
    LINK_FLAGS="$link"

    if [ "$do_debug" -eq "1" ]
    then

       FORT_FLAGS="$compile_d"
       LINK_FLAGS="$link_d"

    fi
          

#
#

  LIB_FLAGS="$NETCDF_LIBS"

  export FORT_FLAGS
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD

 /bin/cp -f -p ../model/ep_s1.inc .
 /bin/cp -f -p ../model/ep_s2.inc .
 /bin/cp -f -p ../model/fun_avg1.inc .
 /bin/cp -f -p ../model/fun_avg2.inc .
 /bin/cp -f -p ../model/s_pr1.inc .
 /bin/cp -f -p ../model/s_pr2.inc .
 /bin/cp -f -p ../model/namelist.inc .
 /bin/cp -f -p ../model/sc_p_g1.inc .
 /bin/cp -f -p ../model/sc_p_g2.inc .
 /bin/cp -f -p ../model/des/desnamelist.inc des/


 set `pwd`
 mfix=`echo $1 | sed 's/\/post_mfix/\/model/'`
# Write mfix/model path into the file mfix_directory_path.inc
 if grep -qs "     CHARACTER(len=132) :: MFIX_PATH = '$mfix'" mfix_directory_path.inc
 then
   echo " "
 else
   echo "     CHARACTER(len=132) :: MFIX_PATH = '$mfix'" > mfix_directory_path.inc
 fi



 if [ -d qmomk ]; then
    /bin/cp -f -p ../model/qmomk/qmomknamelist.inc qmomk/
 else
    /bin/mkdir qmomk
    /bin/cp -f -p ../model/qmomk/qmomknamelist.inc qmomk/
 fi 
     
 case $MODULE_CODE in

      0)
         make -f post_u.make
         ;;

      1)  
         make -f post_l.make
         ;;

 esac
 
 if test $? = 0
 then
    echo
    echo 
    echo "********************************************"
    echo "* Compilation successful: post_mfix created*"
    echo "********************************************"
    echo 
 else
    echo
    echo
    echo "*** File post_mfix NOT created."
    echo 
 fi
 
# Restore the function.inc file in the model directory
  /bin/mv -f "../model/function.0inc" "../model/function.inc"

 chmod +w ep_s1.inc
 chmod +w ep_s2.inc
 chmod +w fun_avg1.inc
 chmod +w fun_avg2.inc
 chmod +w s_pr1.inc
 chmod +w s_pr2.inc
 chmod +w namelist.inc
 chmod +w sc_p_g1.inc
 chmod +w sc_p_g2.inc

 /bin/rm -f ep_s1.inc
 /bin/rm -f ep_s2.inc
 /bin/rm -f fun_avg1.inc
 /bin/rm -f fun_avg2.inc
 /bin/rm -f s_pr1.inc
 /bin/rm -f s_pr2.inc
 /bin/rm -f namelist.inc
 /bin/rm -f sc_p_g1.inc
 /bin/rm -f sc_p_g2.inc
 /bin/rm -f *.fi
