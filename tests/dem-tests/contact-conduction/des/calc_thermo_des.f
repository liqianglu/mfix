!vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv!
!                                                                      !
!  Module name: CALC_THERMO_DES                                        !
!                                                                      !
!  Purpose:                                                            !
!                                                                      !
!                                                                      !
!  Author: J.Musser                                   Date: 16-Jun-10  !
!                                                                      !
!  Comments:                                                           !
!                                                                      !
!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^!
      SUBROUTINE CALC_THERMO_DES(I, INTERP_IJK, INTERP_WEIGHTS, FOCUS)

      Use des_thermo
      Use discretelement
      Use fldvar
      Use interpolation
      Use param1

      IMPLICIT NONE

! Passed variables
!-----------------------------------------------      
! Index of particle being looped over
      INTEGER, INTENT(IN) :: I
! IJK indicies of fluid cells involved in interpolation
      INTEGER, INTENT(IN) :: INTERP_IJK(2**DIMN)
! Weights associated with interpolation
      DOUBLE PRECISION, INTENT(IN) :: INTERP_WEIGHTS(2**DIMN)
! Indicates that debugging information for the particle
      LOGICAL, INTENT(IN) :: FOCUS

! Local variables
!-----------------------------------------------      
! Index of neighbor particle of particle I such that I < J
      INTEGER J
! Generic index of neighbor particle of particle I
      INTEGER JJ
! index to track accounted for particles      
      INTEGER PC
! Number of particles in the radiation domain
      INTEGER N_RAD

! Distance between the centers of particle I and particle J (component)
      DOUBLE PRECISION DISTVEC(DIMN)
! Distance between the centers of particle I and particle J (magnitude)
      DOUBLE PRECISION CENTER_DIST
! Distance between the surfaces of particle I and particle J
      DOUBLE PRECISION SURFACE_DIST
! Angle generated between the line connecting the particle centers of
! particle I and J and the line generated by the center of particle I
! and one of the premiter of the circle generated by intersection area
! of particle I and particle J
      DOUBLE PRECISION ANG_IJ
! Radius of the circle created by the overlap of the spherical particles
      DOUBLE PRECISION R_sij
! Environment temperature used in the radiative heat transfer model
      DOUBLE PRECISION Ts_RAD

! Functions
!-----------------------------------------------      
      DOUBLE PRECISION, EXTERNAL :: DES_DOTPRDCT 

! calculate heat transfer via convection
      IF(DES_CONV_EQ) CALL DES_CONVECTION(I, INTERP_IJK, &
         INTERP_WEIGHTS, FOCUS)

! Loop over thermodynamic neighbor for conduction and radiation
      IF(DES_COND_EQ .OR. DES_RADI_EQ)THEN
! Initialize variables on entry
         Ts_RAD = ZERO
         N_RAD = 0
! Distance between particle centers
         IF (THERMO_NBRHD(I,1).GT.0) THEN
            DO  JJ = 2, THERMO_NBRHD(I,1)+1
! Set the index of the neighbor particle
               J = THERMO_NBRHD(I,JJ)
! Skip the neighbor if it does not exist (should not be a problem)
               IF(.NOT.PEA(J,1) ) CYCLE
! Only do conduction calculations for particles with an index value
! higher than the current particle. The opposite heat transfer will be
! applied to the neighbor.
               IF(J.GT.I) THEN
! Calculate the center distance between the two particles
                  DISTVEC(:) = DES_POS_NEW(I,:) - DES_POS_NEW(J,:)
                  CENTER_DIST = SQRT(DES_DOTPRDCT(DISTVEC,DISTVEC))
! If the radiation heat transfer model is being solved, check to see
! if the particle J is within the domain of particle I.
                  IF(DES_RADI_EQ) THEN
                     IF(CENTER_DIST.LT.RDPC*DES_RADIUS(I))THEN
! Increment the number of neighbors in the radiation domain and sum
! the temperature into the environment temperature (Ts_RAD)
                        N_RAD = N_RAD + 1
                        Ts_RAD = Ts_RAD + DES_T_s_NEW(J)
                     ENDIF
                  ENDIF
! Calculate particle-particle conduction
                  IF(DES_COND_EQ)THEN
                     CALL DES_CONDUCTION(I, J, CENTER_DIST, FOCUS)
                  ENDIF
               ELSEIF(DES_RADI_EQ) THEN
! Calculate the center distance between the two particles
                  DISTVEC(:) = DES_POS_NEW(I,:) - DES_POS_NEW(J,:)
                  CENTER_DIST = SQRT(DES_DOTPRDCT(DISTVEC,DISTVEC))
! If the radiation heat transfer model is being solved, check to see
! if the particle J is within the domain of particle I.
                  IF(RDPC*DES_RADIUS(I).GT.CENTER_DIST)THEN
! Increment the number of neighbors in the radiation domain and sum
! the temperature into the environment temperature (Ts_RAD)
                     N_RAD = N_RAD + 1
                     Ts_RAD = Ts_RAD + DES_T_s_NEW(J)
                  ENDIF
               ENDIF ! J>I
            ENDDO ! Looping over neighbors
         ENDIF  ! neighbors > 0
      ENDIF ! des_conduction or radiation
! calculate heat transfer via radiation
      IF(DES_RADI_EQ .AND. N_RAD .GT. 0)THEN
! Average the temperature
         Ts_RAD = Ts_RAD/N_RAD
         CALL DES_RADIATION(I, Ts_RAD, FOCUS)
      ENDIF

      END SUBROUTINE CALC_THERMO_DES
