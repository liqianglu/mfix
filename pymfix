#!/usr/bin/env python

import os, sys
sys.path.append(os.getcwd())

import thread
import time

from flask import Flask, render_template
app = Flask(__name__)

import mfix

requests = {}
responses = {}

mfix_stopped = False

# change any variable...
# mfix.run.time  = 1000
# mfix.run.tstop = mfix.run.tstop/2
# mfix.run.dt    = 10

# response = 'the pressure is %s \n tstop is %s' % (str(mfix.fldvar.p_g[:100]),mfix.run.tstop)

def run_mfix():
    global mfix_stopped

    mfix.main.setup()
    mfix.main.start()
    while True:
        while not mfix.main.really_finish:
            if requests:
                # requests would only arrive at rank 0
                req_id,command = requests.popitem()
            else:
                # command is empty for rank>0
                req_id,command = '',''

            # broadcast command from rank 0 to all ranks
            command = mfix.main.do_mpi_bcast(command)

            command = ''.join(command).strip()

            if command:
                handle(req_id,command)

            if mfix_stopped:
                time.sleep(1)
            else:
                mfix.main.step()
            leftover = (mfix.run.tstop - mfix.run.time)

        # TODO: support automatic restart
        # if (mfix.leqsol.solver_statistics):
        #     mfix.leqsol.report_solver_stats(mfix.main.nit_total, mfix.run.nstep)
        # if (mfix.run.auto_restart and mfix.run.automatic_restart and mfix.run.iter_restart < 10):
        #     continue

        break

    mfix.main.end()

def handle(req_id,command):
    global mfix_stopped

    cmd = command.split(' ')[0].lower().strip()
    print "THE COMMAND IS",cmd
    if cmd=='help':
        responses[req_id] = '''Usage:
        get VAR=VALUE [ i1 j1 k1 i2 j2 k2 ] - get value of variable [ for a certain index range ]
        list                                - list variables that can be set
        set VAR=VALUE [ i1 j1 k1 i2 j2 k2 ] - set variable to value [ for a certain index range ]
        start                               - (re)start mfix
        step                                - execute one timestep
        stop                                - stop mfix
        \n'''

    elif cmd=='list':
        resp = ''
        for module in ('compar','discretelement','fldvar','main','param','run','run_dp'):
            attr = getattr(mfix,module)
            resp = resp + 'in module %s you can set attributes %s \n\n' % (module,dir(attr))
        resp = resp + " Except for those of the above that are really subroutines/functions instead of variables. Also, the above list is incomplete, and is missing most of the interesting variables. \n\n  Don't forget to prefix with mfix; e.g. set mfix.run.dt 0.001\n\n"
        responses[req_id] = resp
        mfix_stopped = True

    elif cmd=='stop':
        responses[req_id] = 'STOPPING MFIX\n'
        mfix_stopped = True

    elif cmd=='start':
        responses[req_id] = 'STARTING MFIX\n'
        mfix_stopped = False

    elif cmd=='step':
        mfix.main.step()
        responses[req_id] = 'DOING ONE TIMESTEP\n'

    elif cmd=='set':
        mfix.main.step()
        var = command.split(' ')[1].lower().strip()
        val = command.split(' ')[2].lower().strip()

        # slow things down for development
        time.sleep(mfix.compar.mype)

        if len(command.split(' ')) > 3:
            ii,jj,kk,i2,j2,k2 = command.split(' ')[3:9]
            for i in range(int(ii),int(i2)+1):
                for j in range(int(jj),int(j2)+1):
                    for k in range(int(kk),int(k2)+1):
                        if is_on_mype_owns(i,j,k):
                            exec_string = ('%s[%d] = %s' % (var,funijk(i,j,k),val))
                            print "GOING TO EXECUTE: ",exec_string
                            exec(exec_string)
                            print "rank ",mfix.compar.mype," set value for",i,j,k,funijk(i,j,k)
                        else:
                            print "rank ",mfix.compar.mype,"does not own",i,j,k,funijk(i,j,k)
        else:
            exec('%s = %s' % (var,val))
        responses[req_id] = 'ok, I set %s to %s\n' % (var,val)

    else:
        responses[req_id] = 'UNRECOGNIZED COMMAND\n'

def funijk(i,j,k):
    return mfix.compar.ijk_array_of[i,j,k]

def is_on_mype_owns(li, lj, lk):
      return li >= mfix.compar.istart and li <= mfix.compar.iend and lj >= mfix.compar.jstart and lj <= mfix.compar.jend and lk >= mfix.compar.kstart and lk <= mfix.compar.kend

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/help',methods=['GET'])
def help():
    return do_command( "HELP" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/list',methods=['GET'])
def list():
    return do_command( "LIST" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/set',methods=['POST'])
def set():
    return do_command( "SET" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/get',methods=['GET'])
def get():
    return do_command( "GET" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/start',methods=['PUT'])
def start():
    return do_command( "START" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/stop',methods=['PUT'])
def stop():
    return do_command( "STOP" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

def do_command(cmd):
    req_id = thread.get_ident()
    requests[req_id] = cmd
    while req_id not in responses:
        pass
    resp = responses[req_id]
    del responses[req_id]

    return resp

def main():
    """This starts the Flask server on port 5000 """
    thread.start_new_thread(run_mfix, ())
    time.sleep(1)

    if 0==mfix.compar.mype:
        app.run(host='0.0.0.0',debug=False)
    while(True): time.sleep(1)

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()
