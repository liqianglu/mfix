#!/usr/bin/env python

import os, sys
sys.path.append(os.getcwd())

import json
import thread
import time

import logging
from logging.handlers import RotatingFileHandler

from flask import Flask, render_template, request
path = os.path.dirname(os.path.realpath(__file__))
app = Flask(__name__, static_folder=path+'/static', template_folder=path+'/templates')

import mfix

requests = {}
responses = {}

mfix_stopped = True

# change any variable...
# mfix.run.time  = 1000
# mfix.run.tstop = mfix.run.tstop/2
# mfix.run.dt    = 10

# response = 'the pressure is %s \n tstop is %s' % (str(mfix.fldvar.p_g[:100]),mfix.run.tstop)

def run_mfix():
    global mfix_stopped

    mfix.main.setup()
    mfix.main.start()
    while True:
        while not mfix.main.really_finish:
            if requests:
                # requests would only arrive at rank 0
                req_id,cmd_var_args = requests.popitem()
            else:
                # command is empty for rank>0
                req_id = None
                cmd_var_args = (None,None,None)

            json_cmd_var_args = json.dumps(cmd_var_args)

            # broadcast command from rank 0 to all ranks
            json_cmd_var_args = mfix.main.do_mpi_bcast(json_cmd_var_args)

            command, varname, args = json.loads(json_cmd_var_args.tostring())

            if command:
                handle(req_id,command,varname,args)

            if mfix_stopped:
                time.sleep(0.1)
            else:
                mfix.main.step()

        # TODO: support automatic restart
        # if (mfix.leqsol.solver_statistics):
        #     mfix.leqsol.report_solver_stats(mfix.main.nit_total, mfix.run.nstep)
        # if (mfix.run.auto_restart and mfix.run.automatic_restart and mfix.run.iter_restart < 10):
        #     continue

        break

    mfix.main.end()

def handle(req_id,command,var,args):
    global mfix_stopped

    cmd = command.split(' ')[0].lower().strip()

    print "THE COMMAND IS ",cmd

    # TODO: refactor with a Command class, instead of a big switch statement
    if cmd=='help':
        responses[req_id] = '''Usage:
        get VAR=VALUE [ i1 j1 k1 i2 j2 k2 ] - get value of variable [ for a certain index range ]
        list                                - list variables that can be set
        set VAR=VALUE [ i1 j1 k1 i2 j2 k2 ] - set variable to value [ for a certain index range ]
        start                               - (re)start mfix
        step                                - execute one timestep
        stop                                - stop mfix
        \n'''

    elif cmd=='list':
        resp = ''
        for module in ('compar','discretelement','fldvar','main','param','run','run_dp'):
            attr = getattr(mfix,module)
            resp = resp + 'in module %s you can set attributes %s \n\n' % (module,dir(attr))
        resp = resp + " Except for those of the above that are really subroutines/functions instead of variables. Also, the above list is incomplete, and is missing most of the interesting variables. \n\n  Don't forget to prefix with mfix; e.g. set mfix.run.dt 0.001\n\n"
        responses[req_id] = resp
        mfix_stopped = True

    elif cmd=='backupres':
        responses[req_id] = 'BACKING UP RESOURCE FILES\n'
        mfix.main.do_backupres()

    elif cmd=='reinit':
        responses[req_id] = 'REINITIALIZING MFIX\n'
        mfix.main.do_reinit()

    elif cmd=='stop':
        responses[req_id] = 'STOPPING MFIX\n'
        mfix_stopped = True

    elif cmd=='start':
        responses[req_id] = 'STARTING MFIX\n'
        mfix_stopped = False

    elif cmd=='step':
        stepcount = int(args.get('stepcount',None))
        for _ in range(stepcount):
            mfix.main.step()
        responses[req_id] = 'DOING %s TIMESTEP(S)\n' % stepcount

    elif cmd=='get':

        ids = args.get('ids',None)

        # slow things down for development
        time.sleep(mfix.compar.mype)

        if var:
            if ids and len(ids.split(' ')) > 3:
                print "GOING TO GET IDS ", ('%s' % (var))
                ii,jj,kk,i2,j2,k2 = command.split(' ')[3:9]
                for i in range(int(ii),int(i2)+1):
                    for j in range(int(jj),int(j2)+1):
                        for k in range(int(kk),int(k2)+1):
                            if is_on_mype_owns(i,j,k):
                                exec_string = ('%s[%d] = %s' % (var,funijk(i,j,k)))
                                print "GOING TO EXECUTE: ",exec_string
                                exec(exec_string)
                                print "rank ",mfix.compar.mype," set value for",i,j,k,funijk(i,j,k)
                            else:
                                print "rank ",mfix.compar.mype,"does not own",i,j,k,funijk(i,j,k)
            else:
                print "GOING TO EVALUTE ", var
                try:
                    val = str(eval(var))
                except AttributeError:
                    # TODO: use error code for REST call
                    val = "ERROR INCORRECT EXPRESSION: "+var

                print "GOING TO RETURN ", val
                responses[req_id] = val

    elif cmd=='set':

        val = args.get('varvalue',None)
        ids = args.get('ids',None)

        # slow things down for development
        time.sleep(mfix.compar.mype)

        if var and val:
            if ids and len(ids.split(' ')) > 3:
                print "GOING TO SET IDS ", ('%s = %s' % (var,val))
                ii,jj,kk,i2,j2,k2 = command.split(' ')[3:9]
                for i in range(int(ii),int(i2)+1):
                    for j in range(int(jj),int(j2)+1):
                        for k in range(int(kk),int(k2)+1):
                            if is_on_mype_owns(i,j,k):
                                exec_string = ('%s[%d] = %s' % (var,funijk(i,j,k),val))
                                print "GOING TO EXECUTE: ",exec_string
                                exec(exec_string)
                                print "rank ",mfix.compar.mype," set value for",i,j,k,funijk(i,j,k)
                            else:
                                print "rank ",mfix.compar.mype,"does not own",i,j,k,funijk(i,j,k)
            else:
                print "GOING TO SET ", ('%s = %s' % (var,val))
                try:
                    exec('%s = %s' % (var,val))
                    responses[req_id] = 'ok, I set %s to %s\n' % (var,val)
                except AttributeError:
                    # TODO: better error code REST response
                    responses[req_id] = 'ERROR could not set: %s to %s\n' % (var,val)

                print 'ok, I set %s to %s\n' % (var,val)
        else:
            responses[req_id] = 'could not set %s to %s\n' % (var,val)
    else:
        responses[req_id] = 'UNRECOGNIZED COMMAND\n'

def funijk(i,j,k):
    return mfix.compar.ijk_array_of[i,j,k]

def is_on_mype_owns(li, lj, lk):
      return li >= mfix.compar.istart and li <= mfix.compar.iend and lj >= mfix.compar.jstart and lj <= mfix.compar.jend and lk >= mfix.compar.kstart and lk <= mfix.compar.kend

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/help',methods=['GET'])
def help():
    return do_command( "HELP" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/list',methods=['GET'])
def list():
    return do_command( "LIST" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/set/<varname>',methods=['POST'])
def set(varname):
    return do_command( "SET", varname, args=request.form ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/get/<varname>',methods=['GET'])
def get(varname):
    return do_command( "GET", varname, args=request.args ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/backupres',methods=['POST'])
def backupres():
    return do_command( "BACKUPRES" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/reinit',methods=['POST'])
def reinit():
    return do_command( "REINIT" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/step',methods=['POST'])
def step():
    return do_command( "STEP", args=request.form ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/start',methods=['PUT'])
def start():
    return do_command( "START" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/stop',methods=['PUT'])
def stop():
    return do_command( "STOP" ), 200, {'Content-Type': 'text/plain; charset=utf-8'}

def do_command(cmd, varname=None, args = []):
    req_id = thread.get_ident()

    requests[req_id] = ( cmd, varname, args )
    while req_id not in responses:
        time.sleep(0.1)
    resp = responses[req_id]
    del responses[req_id]

    return resp

def main():
    """This starts the Flask server on port 5000 """
    thread.start_new_thread(run_mfix, ())
    time.sleep(1)

    if 0==mfix.compar.mype:
        handler = RotatingFileHandler('foo.log', maxBytes=10000, backupCount=1)
        handler.setLevel(logging.INFO)
        app.logger.addHandler(handler)
        app.run(host='0.0.0.0',debug=False)
    while(True): time.sleep(10)

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()
