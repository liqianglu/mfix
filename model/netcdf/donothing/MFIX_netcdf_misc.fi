!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                          check_netcdf                             !
!
        subroutine MFIX_check_netcdf( status )
        implicit none

        integer :: status

        status = 0

        return
        end subroutine MFIX_check_netcdf

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


        function MFIX_nf90_create(path, cmode, ncid, initialsize, chunksize)

        character (len = *), intent(in   ) :: path
        integer,             intent(in   ) :: cmode
        integer,             intent(inout) :: ncid
        integer, optional,   intent(in   ) :: initialsize
        integer, optional,   intent(inout) :: chunksize
        integer                            :: MFIX_nf90_create

        integer :: fileSize, chunk

        MFIX_nf90_create = 0

        return
        end function MFIX_nf90_create


        function MFIX_nf90_def_dim(ncid, name, len, dimid)

        integer,             intent( in)   :: ncid
        character (len = *), intent( in)   :: name
        integer,             intent( in)   :: len
        integer,             intent(inout) :: dimid
        integer                            :: MFIX_nf90_def_dim

        MFIX_nf90_def_dim = 1
        end function MFIX_nf90_def_dim


 function MFIX_nf90_enddef(ncid, h_minfree, v_align, v_minfree, r_align)
    integer,           intent( in) :: ncid
    integer, optional, intent( in) :: h_minfree, v_align, v_minfree, r_align
    integer                        :: MFIX_nf90_enddef

      MFIX_nf90_enddef = 1
  end function MFIX_nf90_enddef


   function MFIX_nf90_open(path, mode, ncid, chunksize)
    character (len = *), intent(in   ) :: path
    integer,             intent(in   ) :: mode
    integer,             intent(inout) :: ncid
    integer, optional,   intent(inout) :: chunksize
    integer                            :: MFIX_nf90_open
      MFIX_nf90_open = 1
   end function MFIX_nf90_open


  function MFIX_nf90_inquire(ncid, nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum)
    integer,           intent( in)   :: ncid
    integer, optional, intent(inout) :: nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum
    integer                          :: MFIX_nf90_inquire

    integer :: nDims, nVars, nGAtts, unlimDimId, frmt

    MFIX_nf90_inquire = 1
  end function MFIX_nf90_inquire


 function MFIX_nf90_inq_dimid(ncid, name, dimid)
    integer,             intent( in)   :: ncid
    character (len = *), intent( in)   :: name
    integer,             intent(inout) :: dimid
    integer                            :: MFIX_nf90_inq_dimid

    MFIX_nf90_inq_dimid = 1
  end function MFIX_nf90_inq_dimid




  function MFIX_nf90_inq_varid(ncid, name, varid)
    integer,             intent( in)   :: ncid
    character (len = *), intent( in)   :: name
    integer,             intent(inout) :: varid
    integer                            :: MFIX_nf90_inq_varid

    MFIX_nf90_inq_varid = 1
  end function MFIX_nf90_inq_varid

        function MFIX_nf90_close(ncid)

        integer,             intent( in) :: ncid
        integer                          :: MFIX_nf90_close

        MFIX_nf90_close = 1

        end function MFIX_nf90_close
   subroutine MFIX_ncvinq(ncid,varid,varnam,vartyp,nvdims,vdims,nvatts,rcode)


   implicit none

   integer       :: ncid , varid , vartyp , nvdims , nvatts , rcode
   integer       :: vdims(*)
   character*(*)    varnam

   return
   end subroutine MFIX_ncvinq
