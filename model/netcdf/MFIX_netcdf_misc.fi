
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                          check_netcdf                             !
!
	subroutine MFIX_check_netcdf( status )
 	use netcdf
    	integer, intent ( in) :: status

    	if (status /= nf90_noerr) then
	    write (*,*) ' ******************************************'
	    write (*,*) trim(nf90_strerror(status))
 	    write (*,*) ' ******************************************'
   	end if
	end subroutine MFIX_check_netcdf

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


        function MFIX_nf90_create(path, cmode, ncid, initialsize, chunksize)

	use netcdf

	character (len = *), intent(in   ) :: path
	integer,             intent(in   ) :: cmode
	integer,             intent(  out) :: ncid
	integer, optional,   intent(in   ) :: initialsize
	integer, optional,   intent(inout) :: chunksize
	integer                            :: MFIX_nf90_create

	integer :: fileSize, chunk

	MFIX_nf90_create = nf90_create(path, cmode, ncid, initialsize, chunksize)

	return
	end function MFIX_nf90_create


	function MFIX_nf90_def_dim(ncid, name, len, dimid)

	use netcdf

	integer,             intent( in) :: ncid
	character (len = *), intent( in) :: name
	integer,             intent( in) :: len
	integer,             intent(out) :: dimid
	integer                          :: MFIX_nf90_def_dim

	MFIX_nf90_def_dim = nf90_def_dim(ncid, name, len, dimid)
	end function MFIX_nf90_def_dim


  function MFIX_nf90_enddef(ncid, h_minfree, v_align, v_minfree, r_align)

    use netcdf

    integer,           intent( in) :: ncid
    integer, optional, intent( in) :: h_minfree, v_align, v_minfree, r_align
    integer                        :: MFIX_nf90_enddef

      MFIX_nf90_enddef = nf90_enddef(ncid, h_minfree, v_align, v_minfree, r_align)
  end function MFIX_nf90_enddef


   function MFIX_nf90_open(path, mode, ncid, chunksize)

    use netcdf

    character (len = *), intent(in   ) :: path
    integer,             intent(in   ) :: mode
    integer,             intent(  out) :: ncid
    integer, optional,   intent(inout) :: chunksize
    integer                            :: MFIX_nf90_open
      MFIX_nf90_open = nf90_open(path, mode, ncid, chunksize)
   end function MFIX_nf90_open


  function MFIX_nf90_inquire(ncid, nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum)

    use netcdf

    integer,           intent( in) :: ncid
    integer, optional, intent(out) :: nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum
    integer                        :: MFIX_nf90_inquire

    integer :: nDims, nVars, nGAtts, unlimDimId, frmt

    MFIX_nf90_inquire = nf90_inquire(ncid, nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum)

  end function MFIX_nf90_inquire


 function MFIX_nf90_inq_dimid(ncid, name, dimid)

    use netcdf

    integer,             intent( in) :: ncid
    character (len = *), intent( in) :: name
    integer,             intent(out) :: dimid
    integer                          :: MFIX_nf90_inq_dimid

    MFIX_nf90_inq_dimid = nf90_inq_dimid(ncid, name, dimid)
  end function MFIX_nf90_inq_dimid




  function MFIX_nf90_inq_varid(ncid, name, varid)

    use netcdf

    integer,             intent( in) :: ncid
    character (len = *), intent( in) :: name
    integer,             intent(out) :: varid
    integer                          :: MFIX_nf90_inq_varid

    MFIX_nf90_inq_varid = nf90_inq_varid(ncid, name, varid)
  end function MFIX_nf90_inq_varid

	function MFIX_nf90_close(ncid)

	use netcdf

	integer,             intent( in) :: ncid
	integer				 :: MFIX_nf90_close

	MFIX_nf90_close = nf90_close(ncid)

	end function MFIX_nf90_close


   subroutine MFIX_ncvinq(ncid,varid,varnam,vartyp,nvdims,vdims,nvatts,rcode)

   use netcdf

   implicit none

   integer       :: ncid , varid , vartyp , nvdims , nvatts , rcode
   integer       :: vdims(*)
   character*(*)    varnam

   call ncvinq(ncid,varid,varnam,vartyp,nvdims,vdims,nvatts,rcode)

   return
   end subroutine MFIX_ncvinq
