#!/bin/bsh -f

# Indicates if the preprocessor is in the reaction block @(RXNS
in_rxn_block="false"
# Indicates if a reaction block was found in the deck file.
fnd_rxn="false"
# Number of reaction constructs found
rx_cnt="0"

call_rxn_stop="false"
rxn_fmt_err="false"

rxn_dup_err="false"
declare -a all_aliases

format_err() {
  echo -e "\n"
  echo "  *********************************************************************"
  echo "  * Species aliases and reaction names must be FORTRAN variable name  *"
  echo "  * compliant: alphanumeric/underscore combinations with the first    *"
  echo "  * character being a letter. Please correct the variable name in the *"
  echo "  * mfix.dat file and usr_rates files as needed.                      *"
  echo "  *********************************************************************"
  echo -e "\n\n"
  return
}

duplicate_err() {
  echo -e "\n"
  echo "  *********************************************************************"
  echo "  * Species aliases and reaction names must be UNIQUE. Two or more    *"
  echo "  * entries were found to be identical. Please correct these entries  *"
  echo "  * in the mfix.dat and usr_rates files as needed.                    *"
  echo "  *                                                                   *"

  spaceTmplt="  * Duplicate entry:                                                  *"

# Identify the duplicate entries.
  alias_count=${#all_aliases[@]}
  i=0
  while (( i++ < "$alias_count" )); do
    j=$((i+1))
    while (( j++ < "$alias_count" )); do
      if [[ "${all_aliases[$i]}" = "${all_aliases[$j]}" ]]; then
        dup=${all_aliases[$i]}
        echo "  * Duplicate entry: $dup${spaceTmplt:$((21 + ${#dup}))}"
      fi
    done
  done
  echo "  *********************************************************************"
  echo -e "\n"

  return
}


check_val () {
# $1: Type of variable: Species Alias, Reaction Name
# $2: Value pulled from deck file.
# $3: Length constraint

# Clean up any trailing white spaces.
  v1=$(echo $2 | sed -e 's/^ $//g')
  v2=$(echo $2 | sed -e 's/[^[:alnum:]|_]//g')
# Verify that there are no special characters in the name.
  if [[ "$v1" != "$v2" ]]; then
    echo -e "  * Format Error - Invalid $1: $2"
# Verify that the first character is a letter
    call_stop="true"
    rxn_fmt_err="true"
  elif [ ! -z "$(echo ${v1:0:1} | grep '[^a-zA-Z]')" ]; then
    echo -e "  * Format Error - Invalid $1: $2"
    call_stop="true"
    rxn_fmt_err="true"
  elif [ ${#v1} -gt $3 ]; then
    echo -e "  * Format Error - $1: $2 is too long! $3 character limit."
    call_stop="true"
    rxn_fmt_err="true"
  fi

# Verify that the alias is not a duplicate.
  for fndAlias in "${all_aliases[@]}"; do
    if [[ "$fndAlias" = "$2" ]]; then
# Duplicate entries flag an error and force make_mfix to exit
      call_stop="true"
      rxn_dup_err="true"
    fi
  done

# Unique entries are addeed to an array for later comparison.
  alias_count=${#all_aliases[@]}
  aIndex=$((alias_count+1))
  all_aliases[$aIndex]=$2

  return
}


# If a species.inc file exits, delete it and start a new instance.
sfile="species.inc"
if [ -f "$sfile" ]; then
  rm "$sfile"
fi
touch $sfile

echo "! This file is automatically generated by make_mfix through processing" >> $sfile
echo "! species and reaction block input. Do not directly edit this file." >> $sfile

# Check to see if there is a deck file in the run directory.
if [ ! -f "mfix.dat" ]; then
  echo "  *********************************************************************"
  echo "  * Error: usr_rates.f located and mfix.dat is missing!               *"
  echo "  * ----------------------------------------------------------------- *"
  echo "  * User defined file for chemcial reactions/phase changes was found  *"
  echo "  * in the compile directory however, no mfix.dat file was found.     *"
  echo "  * Pre-processing  of the mfix.dat is required for reacting flows.   *"
  echo "  *********************************************************************"
  echo ""
  echo ""
  exit
else

echo "  Found usr_rates.f file. Pre-processing mfix.dat file for "
echo "  chemical reaction data..."

# Loop over each entry in the deck file.
  while read p ; do

# Clean up some control characters (Windows)
    p=$(echo $p | tr -d '\015')
# Remove white spaces and tabs.
    p=$(echo $p | sed -e 's/^[ \t]*//;s/[ \t]*$//')
# Remove comments with hash.
    p=$(echo $p | cut -d "#" -f1 | cut -d "!" -f1)

# Pull off SPECIES_ALIAS lines.
    p1g=$(echo $p | grep -io "species_alias_g.*") # gas phase
    p1s=$(echo $p | grep -io "species_alias_s.*") # solids phases

# Process gas phase species aliases.
#-----------------------------------------------------------------------
    if [ ! -z "$p1g" ]; then
# Get the initial species index.
      sindex=$(echo $p1g | cut -d "(" -f2 | cut -d ")" -f1)
# Get the species alias.
      salias=$(echo $p1g | cut -d "=" -f2 | tr -d "'" | tr -d "\"")
# Split compound entries into an array.
      IFS=', ' read -r -a splst <<< $salias 
# Initialize the loop counter
      lc="0"
# Loop over compound entries
      for p1a in "${splst[@]}"; do
# Ensure that the speices aliases adhead to Fortran variable naming.
        check_val "Species Alias" $p1a 8
# Calculate the species index (for compound entries)
        nsindex=$((sindex+lc))
# Write the species alias link to the include file
        echo "      INTEGER, PARAMETER :: $p1a = $nsindex" >> $sfile
# Increment the loop counter
        lc=$((lc+1))
      done
# Process solids phase species aliases.
#-----------------------------------------------------------------------
    elif [ ! -z "$p1s" ]; then
# Get the initial species index.
      sphase=$(echo $p1s | cut -d "(" -f2 | cut -d "," -f1)
# Get the initial species index.
      sindex=$(echo $p1s | cut -d "," -f2 | cut -d ")" -f1)
# Get the species alias.
      salias=$(echo $p1s | cut -d "=" -f2 | tr -d "'" | tr -d "\"")
# Split compound entries into an array.
      IFS=', ' read -r -a splst <<< $salias 
# Initialize the loop counter
      lc="0"
# Loop over compound entries
      for p1b in "${splst[@]}"; do
# Ensure that the speices aliases adhead to Fortran variable naming.
        check_val "Species Alias" $p1b 8
# Calculate the species index (for compound entries)
        nsphase=$((sphase+lc))
# Write the species alias link to the include file
        echo "      INTEGER, PARAMETER :: $p1b = $sindex" >> $sfile
# Increment the loop counter
        lc=$((lc+1))
      done
    fi

# Pull off reaction block
#-----------------------------------------------------------------------
    p2a=$(echo $p | grep -i "@(RXNS")
    p2b=$(echo $p | grep -i "@(END")
    if [ ! -z "$p2a" ]; then
      fnd_rxn="true"
      in_rxn_block="true"
    elif [ ! -z "$p2b" ]; then
      in_rxn_block="false"
    elif [[ "$in_rxn_block" = "true" ]]; then
      if [ ! -z "$(echo $p | grep "{")" ]; then
# Take the name that precedes the start of the reaction construct {
        rx_name=$(echo $p | cut -d "{" -f1)
        check_val "Reaction Name" $rx_name 32
        rx_cnt=$((rx_cnt+1))
        echo "      INTEGER, PARAMETER :: $rx_name = $rx_cnt" >> $sfile
      fi
    fi
  done < "mfix.dat"
fi

# Was a reaction block found?
if [[ "$fnd_rxn" = "false" ]]; then
# Delete the speices.inc file as it is not needed if a reaction block
# was not found.
  rm "$sfile"
else
  if [ ! -s "$sfile" ]; then
    echo ""
    echo ""
    echo "  *********************************************************************"
    echo "  * Error: SPECIES_ALIAS was not found in mfix.dat file.              *"
    echo "  * ----------------------------------------------------------------- *"
    echo "  * A reaction block \"@(RXNS)\" was found in the mfix.dat file.        *"
    echo "  * However, no species aliases (SPECIES_ALIAS) were provided.        *"
    echo "  * Additional information for specifying chemical reactions is given *"
    echo "  * in Section 5.11 Chemical Reactions of the Readme file.            *"
    echo "  *********************************************************************"
    echo ""
    echo ""
    exit
   fi
fi
# Report any format errors
if [[ "$rxn_fmt_err" = "true" ]]; then
  format_err
fi
# Report any duplicate entries (species aliases/reaction names)
if [[ "$rxn_dup_err" = "true" ]]; then
  duplicate_err
fi

if [[ "$call_stop" = "true" ]]; then
  echo -e "\n\n  An input error for chemical reactions was detected."
  echo "  Please correct the error and execute make_mfix again."
  echo -e "  Exiting make_mfix.\n\n"
  exit
fi

echo -e "\n  Reaction data was successfully processed. "

