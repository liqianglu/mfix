#/bin/sh -f
#
# MFIX script file for obtaining user-defined files and
# executing 'make'
#  Usage:
#     1) on unix machines     :  sh    mfix/model/make_mfix
#     2) on NT using PGI bash :  bash  mfix/model/make_mfix
#
# M. Syamlal and P. Nicoletti                  9-27-94
#
vers="MFIX2003-1"
echo
echo 
echo "*******************************************"
echo "* Creating the MFIX-executable mfix.exe   *"
echo "*                Version $vers              *"
echo "*******************************************"
echo

#
# Get run directory name
#
set `pwd` ; run_dir=$1
#
#  Get path name to mfix directory and cd to mfix directory
#
mfix=`echo $0 | sed 's/\/make_mfix//'`
cd $mfix
set `pwd` ; mfix=$1

if test $mfix = $run_dir 
then
  echo "*** Execute this command from any directory other than the current directory!"
  echo "*** It is usually executed from a run directory containing user defined files."
  echo
  exit
fi


# get user input
echo
echo "MFIX directory is $mfix"
echo

echo -n "Do you need SMP version? (y/n) [no] "
read smp_version

echo
echo -n "Do you need DMP version? (y/n) [no] "
read dmp_version

echo
echo -n "Do you need debug version? (y/n) [no] "
read dbg_version

echo
echo -n "Force re-compilation of source files in run directory? (y/n) [no] "
read auto_compile
  
case $dmp_version in
  y|Y )

  mpi_include="/usr/include"

  echo
  echo -n "checking for mpif.h in the default directory $mpi_include"
            if test -f "$mpi_include/mpif.h"
            then
	        echo
                echo -n "using mpif.h from $mpi_include"
            else
	        echo
                echo -n "input the location of the directory where mpif.h resides: "
                read mpi_include
            fi
  ;;
  *)
  mpi_include="$mfix/dmp_modules/mpi_donothing"
  ;;
esac
ln -sf "$mpi_include/mpif.h" .

#
#------------------------------------------------------------------------
# Define machine dependent flags and copy machine dependent files
# Check whether the last compilation was on the same machine.
# Give a different name for each machine file (IRIXF90.F, ULTRIX.F, etc.)

    set `uname -s` ; opsys=$1
    
    case $opsys in

      OSF1)
            mach_file="OSF1.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="-lcxmlp -lmpi -lelan"
            libs="-lcxmlp -lmpi -lelan"

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-omp"
            compile_d="-c -I. -I$mpi_include -C -trapuv -g -free -nowarn -assume byterecl -convert big_endian "
            link_d="-C -g -nowarn -assume byterecl -convert big_endian"

            compile="-c -I. -I$mpi_include -O5 -free -nowarn -assume byterecl -convert big_endian "
            compile2="-c -I. -I$mpi_include -O5 -free -nowarn -assume byterecl -convert big_endian "
            link="-O5 -nowarn -assume byterecl -convert big_endian"
            MODULE_CODE=1
            ;;

      AIX)
            mach_file="AIX.F"

            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpxlf90_r
                        LINK_CMD=mpxlf90_r
                ;;
              *)
                        FORTRAN_CMD=xlf90_r
                        LINK_CMD=xlf90_r
                ;;
            esac

            libs_d="-lblas "
            libs="-lblas -lesslp2_r"

            OBJ_EXT=o
            FORTRAN_EXT=f

#	    =============================
#	    use mpxlf90_r or xlf90_r
#	    for thread safe code
#	    =============================
            omp="-qsmp=omp -qsmp=noauto -qnosave "

#	    =================================
#	    the module directory cannot be on 
#	    a GPFS parallel file system
#	    =================================
	    moddir=/tmp/$USER
            if test -d $moddir
	    then
	    touch $moddir
	    else
	    mkdir $moddir
	    fi

 	    compile_common="-c -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -c -I.  -freeform -I$moddir -qmoddir=$moddir "
            compile_d="-C -g -qinitauto=FF -qflttrap -freeform $compile_common"
            link_d="$compile_d"

            compile=" -O3 -qhot -qstrict  -qarch=pwr3 -qtune=pwr3 -qcache=auto $compile_common"
            compile2="$compile"
            link="-O3 -qstrict -qarch=pwr3 -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -qtune=pwr3 -qcache=auto "

#	    ------------------
#	    flags for inlining
#	    ------------------
	    inline_objs="compare.o eosg.o discretize.o "
	    inline_files="compare.f eosg.f discretize.f "
	    inline_flags="-qipa=inline=auto -Q $inline_files"
	    preinline_flags=" "

            MODULE_CODE=1
            ;;

    
      IRIX64) 
	    mach_file="IRIXF90.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="-lblas -lmpi"
            libs="-lblas -lmpi"
	      
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
	    compile_common="-c -I. -I$mpi_include -64 -freeform "
            compile_d="$compile_common -C -trapuv -g "
            link_d="-IPA -64 -C -g"

            compile="$compile_common -O3 -mips4 "
            compile2="$compile_common -O1 -mips4 "
            link="-IPA -64 -O3 -mips4"
            MODULE_CODE=0
#           ------------------
#           flags for inlining
#           ------------------
            inline_objs="compare.o eosg.o discretize.o "
            inline_files="compare.f eosg.f discretize.f "
#            inline_flags=" -INLINE:must=compare_:file=compare.o -INLINE:must=eosg_:file=eosg.o -INLINE:must=phi_c_of_:file=discretize.o"
	    inline_flags=" -IPA -INLINE:must=compare_,eosg_,phi_c_of_,xsi_:file=compare.o,eosg.o,discretize.o "
            preinline_flags=" -IPA "

            ;;
	    
      ULTRIX) 
	    mach_file="ULTRIX.F"
  
            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d=blas90.a
            libs=blas90.a
	       
            OBJ_EXT=o
            FORTRAN_EXT=f90
	    omp="?"
            compile_d="-c -I. -I$mpi_include -g -nowarn -freeform -convert big_endian"
            link_d="-g -nowarn -convert big_endian"
            compile="-c -I. -I$mpi_include -nowarn -O2 -freeform -convert big_endian"
            compile2="-c -I. -I$mpi_include -nowarn -O2 -freeform -convert big_endian"
            link="-O2 -nowarn -convert big_endian"
            MODULE_CODE=0
	    
            ;;
             

    Linux)
	    mach_file="LINUX.F"
	    
            FORTRAN_CMD=mpif90
            LINK_CMD=mpif90
            libs_d="-lblas blas90.a"
            libs="-lblas blas90.a"
    
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
	    compile_common="-c -I.  -Mnosave -Mfreeform -Mrecursive -Mreentrant -byteswapio"
            compile_d=" -g -Mbounds -Mchkptr -Mchkfpstk -Mchkstk $compile_common"
            link_d=" "
            compile=" -O -Mdalign $compile_common"
            compile2="-O1 -Mdalign $compile_common"
            link="  "
            MODULE_CODE=1
	    
#           ------------------
#           flags for inlining
#           ------------------
            inline_objs="compare.o eosg.o discretize.o "
            inline_files="compare.f eosg.f discretize.f "
            inline_flags=" "
#            inline_flags=" -Minline=size:10 -Minfo=inline $inline_files"
            preinline_flags="  "


            ;;
	    
	    
    CYGWIN32_NT)
	    mach_file="PGNT.F"
   
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d=blas90.a
            libs=blas90.a
	       
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link_d="-g"
            compile="-c -I. -I. -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            compile2="-c -I. -I. -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link=" "
            MODULE_CODE=1

            ;;
	    
    CYGWIN_NT-4.0)
	    mach_file="PGNT.F"
   
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d=blas90.a
            libs=blas90.a
	       
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link_d="-g"
            compile="-c -I. -I$mpi_include -O -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            compile2="-c -I. -I$mpi_include -O1 -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link=" "
            MODULE_CODE=1

            ;;
	    


      *) echo "Sorry, no support for operating system: $opsys"
         echo 
	 echo "modify  make_mfix   to add support"
	 echo
         exit ;;
    esac
#
#------------------------------------------------------------------------
#
echo
echo "Compiling with machine-dependent file $mach_file"
echo

# prepare for SMP version   
smp_check="COMPILED_SMP"
case $smp_version in
  y|Y )
            if test -f $smp_check
            then
	        echo
            else
                /bin/rm -f *.o *.a *.mod *.exe
                touch $smp_check
            fi
    ;;
  *)
            if test -f $smp_check
            then
                /bin/rm -f *.o *.a *.mod *.exe
                /bin/rm -f $smp_check
            else
	        echo
            fi
    ;;
esac

# prepare for DMP version   
dmp_check="COMPILED_DMP"
case $dmp_version in
  y|Y )
            if test -f $dmp_check
            then
	        echo
            else
                /bin/rm -f *.o *.a *.mod *.exe
                touch $dmp_check
            fi
    ;;
  *)
            if test -f $dmp_check
            then
                /bin/rm -f *.o *.a *.mod *.exe
                /bin/rm -f $dmp_check
            else
	        echo
            fi
    ;;
esac

#Prepare for the current machine	    
    mach_check="COMPILED.WITH.$mach_file"
    if test -f $mach_check
    then
       echo
    else
       chmod +w machine.f
       /bin/cp -f  $mach_file machine.f
       /bin/rm -f *.o *.a *.mod *.exe
       /bin/rm -f COMPILED.WITH.*
       touch $mach_check
    fi


	    
    
# create default *.f and *.inc files in model directory, if they do not exist
  cd $run_dir
  echo
  echo "Ignore messages such as \"Cannot access *.f or *.inc\""
  for i in `ls *.f` 
  do
  
#   Is there a similar file in Mfix/model directory?
    if test -r $mfix/$i 
    then
       outfile=`echo $i | sed 's/\./\.0/'`
#      Is there default file Mfix/model directory?
       if test -r $mfix/$outfile
       then
          case $auto_compile in
             y|Y)
                  chmod u+w $outfile
                  /bin/cp -f  $run_dir/$outfile $outfile
                  ;;
             *)
                  do_nothing="ok"
                  ;;
          esac
      
       else
#        Mfix/model directory does not have a default file. create one.
         /bin/cp -f  $mfix/$i $mfix/$outfile
       fi
       
    fi
  done
  
  for i in `ls *.inc` 
  do
  
#   Is there a similar file in Mfix/model directory?
    if test -r $mfix/$i 
    then
       outfile=`echo $i | sed 's/\./\.0/'`
#      Is there default file Mfix/model directory?
       if test -r $mfix/$outfile
       then
          do_nothing="ok"
      
       else
#        Mfix/model directory does not have a default file. create one.
         /bin/cp -f  $mfix/$i $mfix/$outfile
       fi
       
    else
      /bin/cp -f  $i $mfix 
      echo "Using nonMfix include file: $i"
    fi
  done
  echo
#
#------------------------------------------------------------------------
#
# Loop through all *.0* files in mfix/model directory
  cd $mfix

  echo
  echo "Files from run directory used for making Mfix:"
  for i in `ls *.0*`
  do
  
#   The user has a corresponding file
    outfile=`echo $i | sed 's/\.0/\./'`
    if test -r $run_dir/$outfile 
    then
	echo "   $outfile"

#      User's file different from the .f or .inc file: copy user's file
       cmp -s $run_dir/$outfile  $outfile 
       if test $? = 0
       then
          case $auto_compile in
             y|Y)
                  chmod u+w $outfile
                  /bin/cp -f  $run_dir/$outfile $outfile
                  ;;
             *)
                  do_nothing="ok"
                  ;;
          esac
       else
          chmod u+w $outfile
          /bin/cp -f  $run_dir/$outfile $outfile
       fi


#   User does not have the corresponding file
    else

#     The .0f or .0inc file different from the .f or .inc file: copy *.0* file
       cmp -s $i $outfile
       if test $? = 0
       then
          /bin/rm -f $i
       else
          /bin/mv -f $i $outfile
	  touch $outfile
       fi

    fi
  done
  echo
  
#
#------------------------------------------------------------------------
#

  case $dmp_version in
  y|Y )
	echo
	echo -n '******************************************************'
	echo
	echo -n 'Preparing files for your dmp and/or smp compilation'
	echo
	echo -n '******************************************************'
	echo
    
    ;;
  *)
	echo
	echo -n '******************************************************'
	echo
	echo -n 'Preparing files for your serial/smp compilation'
	echo
	echo -n '******************************************************'
	echo
        /bin/cp -f  mfix_l.make mfix_l_not.make
	ex mfix_l_not.make < dmp_modules/ex.commands
	/bin/cp -f  mfix_u.make mfix_u_not.make
	ex mfix_u_not.make < dmp_modules/ex.commands

        cmp -s dmp_modules/compar_mod.f dmp_modules/mpi_donothing/compar_mod.f 
        if test $? = 0
        then
	 echo
        else
 	 /bin/cp -f  dmp_modules/compar_mod.f dmp_modules/mpi_donothing/
        fi

        cmp -s dmp_modules/gridmap_mod.f dmp_modules/mpi_donothing/gridmap_mod.f 
        if test $? = 0
        then
	 echo
        else
         /bin/cp -f  dmp_modules/gridmap_mod.f dmp_modules/mpi_donothing/
        fi
    ;;
  esac

#
#------------------------------------------------------------------------
#

#make_mfix:
  case $smp_version in
  y|Y )
    mp_flag="$omp"
    ;;
  *)
    mp_flag=" "
    ;;
  esac

  case $dbg_version in
  y|Y )
    echo
    echo "Execution may be SLOW.  Do not use debug version for production runs!"
    FORT_FLAGS="$mp_flag $compile_d"
    FORT_FLAGS2="$mp_flag $compile_d"
    LINK_FLAGS="$mp_flag $link_d"
    LIB_FLAGS="$libs_d"
    ;;
  *)
    FORT_FLAGS="$mp_flag $compile $preinline_flags"
    FORT_FLAGS2="$mp_flag $compile2 $preinline_flags"
    LINK_FLAGS="$mp_flag $link"
    LIB_FLAGS="$libs"
    ;;
  esac

  echo "\n Compiling inline files . . ."
  
  export FORT_FLAGS
  export FORT_FLAGS2
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD
        
 
  case $MODULE_CODE in
  0)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_u.make $inline_objs"
   	    make -f mfix_u.make $inline_objs
   	 ;;
  	*)
   	    echo "make -f mfix_u_not.make $inline_objs"
   	    make -f mfix_u_not.make $inline_objs
   	 ;;
  	esac
   ;;
  1)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_l.make $inline_objs"
   	    make -f mfix_l.make $inline_objs
   	 ;;
  	*)
   	    echo "make -f mfix_l_not.make $inline_objs"
   	    make -f mfix_l_not.make $inline_objs
   	 ;;
  	esac
   ;;
  esac


  case $smp_version in
  y|Y )
    mp_flag="$omp"
    ;;
  *)
    mp_flag=" "
    ;;
  esac

  case $dbg_version in
  y|Y )
    echo
    echo "Execution may be SLOW.  Do not use debug version for production runs!"
    FORT_FLAGS="$mp_flag $compile_d"
    FORT_FLAGS2="$mp_flag $compile_d"
    LINK_FLAGS="$mp_flag $link_d"
    LIB_FLAGS="$libs_d"
    ;;
  *)
    FORT_FLAGS="$mp_flag $compile $inline_flags"
    FORT_FLAGS2="$mp_flag $compile2 $inline_flags"
    LINK_FLAGS="$mp_flag $link"
    LIB_FLAGS="$libs"
    ;;
  esac

  echo "\nPlease wait . . ."
  
  export FORT_FLAGS
  export FORT_FLAGS2
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD



  case $MODULE_CODE in
  0)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_u.make mfix.exe"
   	    make -f mfix_u.make mfix.exe
   	 ;;
  	*)
   	    echo "make -f mfix_u_not.make mfix.exe"
   	    make -f mfix_u_not.make mfix.exe
   	 ;;
  	esac
   ;;
  1)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_l.make mfix.exe"
   	    make -f mfix_l.make mfix.exe
   	 ;;
  	*)
   	    echo "make -f mfix_l_not.make mfix.exe"
   	    make -f mfix_l_not.make mfix.exe
   	 ;;
  	esac
   ;;
  esac

  if test $? = 0
  then
    /bin/cp -f  mfix.exe $run_dir
    echo

    case $dmp_version in
    y|Y )
        echo "********************************************************************"
        echo " Compilation successful: mfix.$vers created"
	echo " To run MFIX type (or equivalent): mpirun -np<# processors> mfix.exe"
        echo "********************************************************************"
      ;;
    *)
        echo "*******************************************"
        echo " Compilation successful: mfix.$vers created"
	echo " To run MFIX type: mfix.exe"
        echo "*******************************************"
      ;;
    esac

  else
    echo
    echo
    echo "*** File mfix.exe NOT created."
    echo 
  fi
  

cd $run_dir



