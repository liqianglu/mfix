#!/bin/bsh -f
#
# MFIX script file for obtaining user-defined files and
# executing 'make'
#  Usage:
#     1) on unix machines     :  sh    mfix/model/make_mfix
#     2) on NT using PGI bash :  bash  mfix/model/make_mfix
#
# M. Syamlal and P. Nicoletti                  9-27-94
#
vers="2004-3"
# Flag variable for compiling with Pentium 4 specific optimization flags   
# Set to 0 to avoid Pentium 4 specific optimizations
P4_OPTIMIZE=1
#
#============ TAU related settings ===================
# Flag variable to enable TAU automatic instrumentation for performance
# profiling
#USE_TAU=1
  # ***** I M P O R T A N T
  # MUST set the TAUROOTDIR environment variable to a valid path of TAU installation
  # if USE_TAU is enabled.
  TAUROOTDIR=/mnt/home/ACTS/halow/TAU/tau
  # MUST set the PDTROOTDIR environment variable to a valid path of PDToolkit installation
  # if USE_TAU is enabled.
  PDTROOTDIR=/mnt/home/ACTS/halow/TAU/pdt
  # *****
#========== end of TAU related settings ==============  
#
# Flag variable for compiling with interfaces to call ISAT
# To set to true, change this to 1. By default it is set to false (0).
DO_ISAT=0
#
echo
echo 
echo "*******************************************"
echo "* Creating the MFIX-executable mfix.exe   *"
echo "*                Version $vers              *"
echo "*******************************************"
echo

#
# Get run directory name
#
set `pwd` ; run_dir=$1
#
#  Get path name to mfix directory and cd to mfix directory
#
mfix=`echo $0 | sed 's/\/make_mfix//'`
cd $mfix
set `pwd` ; mfix=$1

if test $mfix = $run_dir 
then
  echo "*** Execute this command from any directory other than the current directory!"
  echo "*** It is usually executed from a run directory containing user defined files."
  echo
  exit
fi


# get user input
echo
echo "MFIX directory is $mfix"
echo

echo -n "Do you need SMP version? (y/n) [no] "
read smp_version

echo
echo -n "Do you need DMP version? (y/n) [no] "
read dmp_version

#
#------------------------------------------------------------------------
# Define machine dependent flags and copy machine dependent files
# Check whether the last compilation was on the same machine.
# Give a different name for each machine file (IRIXF90.F, ULTRIX.F, etc.)

    set `uname -s` ; opsys=$1

#------------------------------------------------------------------------
#  Check if the system is a Linux system, to display WARNING message 
if test $opsys = "Linux"
then
  echo
  echo "-------------- W  A  R  N  I  N  G ---------------------"
  echo "      For compiling on Linux with Intel compilers: "
  echo "           ----------------------------                 "
  echo "MFIX will be compiled with applicable optimization flags"
  echo "if the next question is answered [no]. "
  echo "Note that, default optimization flags are for "
  echo "           Pentium 4 processors ONLY! "
  echo "You can enable non-Pentium 4 specific optimization flags "
  echo "by editing line 14 in model/make_mfix to set : "
  echo "P4_OPTIMIZE=0 "
  echo "--------------------------------------------------------"  
  echo 
fi

echo -n "Do you need debug version? (y/n) [no] "
read dbg_version
echo
echo -n "Force re-compilation of source files in run directory? (y/n) [no] "
read auto_compile
  
case $dmp_version in
  y|Y )

  mpi_include="/usr/include"

  echo
  echo -n "checking for mpif.h in the default directory $mpi_include"
            if test -f "$mpi_include/mpif.h"
            then
	        echo
                echo -n "using mpif.h from $mpi_include"
            else
	        echo
                echo -n "input the location of the directory where mpif.h resides: "
                read mpi_include
            fi
  ;;
  *)
  mpi_include="$mfix/dmp_modules/mpi_donothing"
  echo " "
  echo " "
  echo "-------------- W  A  R  N  I  N  G ---------------------"
  echo "Current configuration of MFIX makefile for TAU can be only used in dmp mode"
  echo "Continuing with compilation without TAU directives"
  echo "--------------------------------------------------------"
  echo " "
  echo " "
  unset USE_TAU
  ;;
esac
ln -sf "$mpi_include/mpif.h" .

#-----
# Check if the mpif.h header is LAM/MPI header file or MPICH
# if it is determined to be LAM/MPI then terminate compilation with a msg
#-----
  if [ "$USE_TAU" ]
  then
    if grep 'LAM' $mfix/mpif.h >/dev/null ; then
      echo " "
      echo "-------------- M P I  L I B R A R Y  E R R O R ----------"
      echo " USE_TAU flag was enabled in make_mfix for inserting TAU profiling" 
      echo " directives automatically during compilation."
      echo " "
      echo " Current installation of TAU only works with MPICH library!"
      echo " MPI header file, mpif.h was determined to be LAM/MPI header file!"
      echo " Please either change your MPI settings to point for MPICH library"
      echo " (if you would like to have TAU profiling) or "
      echo " disable USE_TAU flag at line 19 of make_mfix"
      echo "--------------------------------------------------------"
      echo " "
      exit
    fi 
  fi
#------------------------------------------------------------------------
#  Check if the system is a Linux system, if yes then ask the user which 
#  compiler to use    
#
    if test $opsys = "Linux"
    then
       echo
       echo
       echo "Linux system detected, please select compiler"
       echo
       echo "MFIX Compilation directives available for following compilers:"
       echo " - Intel Linux Fortran Compiler (ifc)"
       echo " - Portland Group Linux Fortran Compiler (pgf90)"
       echo -n "Do you want to compile with Intel Linux F90 Compiler? (y/n) [yes] "
       read lnx_compiler
       case $lnx_compiler in
         y|Y )
	   echo " " 
	   echo "Intel Linux Fortran Compiler selected"
	   opsys="Linux_ifc"
           ;;
         n|N )
	   echo " "
	   echo "Portland Group Linux Fortran Compiler selected" 	      
	   opsys="Linux_pgi"
           ;; 
         *)
	   echo " "
           echo "Intel Linux Fortran Compiler selected"
	   opsys="Linux_ifc"
           ;;
       esac    

       if test $opsys = "Linux_ifc"
       then
         echo 
         echo "  Supported Intel Linux Fortran compiler versions:"
         echo "    1) Intel Linux Fortran Compiler (ifort) version 8.0"
         echo "    2) Intel Linux Fortran Compiler (ifc) version 7.X" 
         echo -n "   Enter line number corresponding the compiler version? (1/2) [1] "
         read ver_compiler
         case $ver_compiler in
         1)
	   echo " "
           echo "Intel Linux Fortran Compiler (ifort) version 8.0 selected"
           intel_ver="Linux_ifc8"
           ;;
         2)
	   echo " "
           echo "Intel Linux Fortran Compiler (ifc) version 7.X selected"
           intel_ver="Linux_ifc7"
           ;;
         *)
	   echo " "
           echo "Intel Linux Fortran Compiler (ifort) version 8.0 selected"
           intel_ver="Linux_ifc8"
           ;;
       esac
       fi
    else
       echo  
    fi

    case $opsys in

      OSF1)
            mach_file="OSF1.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="-lcxmlp -lmpi -lelan"
            libs="-lcxmlp -lmpi -lelan"

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-omp"
            compile_d="-c -I. -I$mpi_include -C -trapuv -g -free -nowarn -assume byterecl -convert big_endian "
            link_d="-C -g -nowarn -assume byterecl -convert big_endian"

            compile="-c -I. -I$mpi_include -O5 -free -nowarn -assume byterecl -convert big_endian "
            compile2="-c -I. -I$mpi_include -O5 -nowarn -assume byterecl -convert big_endian "
            link="-O5 -nowarn -assume byterecl -convert big_endian"
            MODULE_CODE=1
            ;;

      AIX)
            mach_file="AIX.F"

            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpxlf90_r
                        LINK_CMD=mpxlf90_r
                ;;
              *)
                        FORTRAN_CMD=xlf90_r
                        LINK_CMD=xlf90_r
                ;;
            esac

            libs_d="-lblas "
            libs="-lblas -lesslp2_r"

            OBJ_EXT=o
            FORTRAN_EXT=f

#	    =============================
#	    use mpxlf90_r or xlf90_r
#	    for thread safe code
#	    =============================
            omp="-qsmp=omp -qsmp=noauto -qnosave "

#	    =================================
#	    the module directory cannot be on 
#	    a GPFS parallel file system
#	    =================================
	    moddir=/tmp/$USER
            if test -d $moddir
	    then
	    touch $moddir
	    else
	    mkdir $moddir
	    fi

 	    compile_common="-c -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -c -I.  -freeform -I$moddir -qmoddir=$moddir "
            compile_d="-C -g -qinitauto=FF -qflttrap -freeform $compile_common"
            link_d="$compile_d"

            compile=" -O3 -qhot -qstrict  -qarch=pwr3 -qtune=pwr3 -qcache=auto $compile_common"
            compile2="-c -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -c -I.  -I$moddir -qmoddir=$moddir -O3 -qhot -qstrict  -qarch=pwr3 -qtune=pwr3 -qcache=auto $compile_common"
            link="-O3 -qstrict -qarch=pwr3 -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -qtune=pwr3 -qcache=auto "

#	    ------------------
#	    flags for inlining
#	    ------------------
	    inline_objs="compare.o eosg.o discretize.o "
	    inline_files="compare.f eosg.f discretize.f "
	    inline_flags="-qipa=inline=auto -Q $inline_files"
	    preinline_flags=" "

            MODULE_CODE=1
            ;;

    
      IRIX64) 
	    mach_file="IRIXF90.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="-lblas -lmpi"
            libs="-lblas -lmpi"
	      
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
	    compile_common="-c -I. -I$mpi_include -64 -freeform "
            compile_d="$compile_common -C -trapuv -g "
            link_d="-IPA -64 -C -g"

            compile="$compile_common -O3 -mips4 "
            compile2="-c -I. -I$mpi_include -64 -O3 -mips4"
            link="-IPA -64 -O3 -mips4"
            MODULE_CODE=0
#           ------------------
#           flags for inlining
#           ------------------
            inline_objs="compare.o eosg.o discretize.o "
            inline_files="compare.f eosg.f discretize.f "
#            inline_flags=" -INLINE:must=compare_:file=compare.o -INLINE:must=eosg_:file=eosg.o -INLINE:must=phi_c_of_:file=discretize.o"
	    inline_flags=" -IPA -INLINE:must=compare_,eosg_,phi_c_of_,xsi_:file=compare.o,eosg.o,discretize.o "
            preinline_flags=" -IPA "

            ;;
	    
      ULTRIX) 
	    mach_file="ULTRIX.F"
  
            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="blas90.a odepack.a"
            libs="blas90.a odepack.a"
	       
            OBJ_EXT=o
            FORTRAN_EXT=f90
	    omp="?"
            compile_d="-c -I. -I$mpi_include -g -nowarn -freeform -convert big_endian"
            link_d="-g -nowarn -convert big_endian"
            compile="-c -I. -I$mpi_include -nowarn -O2 -freeform -convert big_endian"
            compile2="-c -I. -I$mpi_include -nowarn -O2 -convert big_endian"
            link="-O2 -nowarn -convert big_endian"
            MODULE_CODE=0
	    
            ;;
             

    Linux_pgi)
	    mach_file="LINUX.F"
	    
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d="-lblas blas90.a odepack.a"
            libs="-lblas blas90.a odepack.a"
    
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
	    compile_common="-c -I.  -Mnosave -Mfreeform -Mrecursive -Mreentrant -byteswapio"
            compile_d=" -g -Mbounds -Mchkptr -Mchkfpstk -Mchkstk $compile_common"
            link_d=" "
            compile=" -O -Mdalign $compile_common"
            compile2="-O1 -Mdalign -c -I.  -Mnosave -Mrecursive -Mreentrant -byteswapio"
            link="  "
            MODULE_CODE=1
	    
#           ------------------
#           flags for inlining
#           ------------------
            inline_objs="compare.o eosg.o discretize.o "
            inline_files="compare.f eosg.f discretize.f "
            inline_flags=" "
#            inline_flags=" -Minline=size:10 -Minfo=inline $inline_files"
            preinline_flags="  "

            ;;
	    
    Linux_ifc)
          #-----------
          # Check if the Intel Linux compiler specific machine.f exists
	  #-----------
	    if test -f "$mfix/LINUX_intel.F"
	    then
              mach_file="LINUX_intel.F"	     
	    else
	      echo LINUX_intel.F "not found in $mfix"
	      exit
	    fi
          #-----------	    
          # Decide to use mpif90 or ifc as the compiler & linker command
	  #-----------
            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpif90
                        LINK_CMD=mpif90
                ;;
              *)
                        if test $intel_ver = "Linux_ifc8" 
                        then
                           FORTRAN_CMD=ifort
                           LINK_CMD="ifort -lsvml"
                        else
                           FORTRAN_CMD=ifc
                           LINK_CMD=ifc
                        fi
                ;;
            esac

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-openmp -assume cc_omp"
            libs='blas90.a odepack.a'
	    
            if test $intel_ver = "Linux_ifc7"
            then
              #-----------
	      # Check if Intel Linux compiler portability library is accessible?
	      #-----------
               echo
               echo "checking for Intel compiler portability library, PEPCF90" 
	       echo "in the default directory /opt/intel/compiler70/ia32/lib"

            if test -f "/opt/intel/compiler70/ia32/lib/libPEPCF90.a"
            then
	        echo
              #  echo -n "PEPCF90 library found under /opt/intel/compiler70/ia32/lib"
		intel_lib="/opt/intel/compiler70/ia32/lib"
            else
	        intel_dir="/opt/intel"
	        echo  "Library not found. Enter the directory "
                echo -n "where Intel Linux compiler is installed [e.g. /opt/intel]: "
                   read intel_dir
  	         intel_lib="$intel_dir/compiler70/ia32/lib"  

 	         if test -d "$intel_lib"
	         then
                   echo
	         else
	           echo "Directory $intel_lib not found"
	           exit
	         fi

            fi

            if [ "$F_UFMTENDIAN" ]
            then
              #echo "Environment variable, F_UFMTENDIAN is found"

              if ( expr "$F_UFMTENDIAN" = "big" )
              then
                 echo "***********************************"
                 echo "Intel Big Endian environment is set"
                 echo "***********************************"
              else
                 echo "F_UFMTENDIAN environment variable  IS NOT set to big endian!"
                 echo "Check the current value of F_UFMTENDIAN variable by:"
		 echo "echo \$F_UFMTENDIAN"
		 echo "then issue the following Cshell command at the prompt and "
                 echo "recompile:"
                 echo "setenv F_UFMTENDIAN big for csh/tcsh"
                 echo "export F_UFMTENDIAN=big for ksh/bash"
		 echo " "
                 echo "Aborting compilation"
		 exit
              fi

            else
              echo "Environment variable for big endian IS NOT set!"
              echo "Issue the following Cshell command at the prompt and "
              echo "then recompile:"
              echo "setenv F_UFMTENDIAN big for csh/tcsh"
              echo "export F_UFMTENDIAN=big for ksh/bash"
	      echo " "
              echo "Aborting compilation" 
	      exit
            fi


         # Switch to general optimization flags if not compiling on Pentium 4 architecture 
            if [ $P4_OPTIMIZE -eq 0 ]
	    then
               compile_common="-c -O3 -I. -w -w95 -static -ip -FR"
	    else
	       compile_common="-c -O3 -axKW -tpp7 -I. -w -w95 -static -ip -FR"
	    fi
            compile_d="-g -O0 -c -FR -I. -w -d1 -CB " 
            link_d="-I. -L$intel_lib -lPEPCF90 "
            compile="$compile_common"
            compile2="-c -O3 -axKW -tpp7 -I. -w -w95 -i_dynamic -ip"
            link="-I. -L$intel_lib -lPEPCF90"
            MODULE_CODE=0
            fi

            if test $intel_ver = "Linux_ifc8" 
            then
         # Switch to general optimization flags if not compiling on Pentium 4 architecture 
              if [ $P4_OPTIMIZE -eq 0 ]
	      then
                compile_common="-c -O3 -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl -FR"
	      else
                compile_common="-c -O3 -axKW -tpp7 -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl -FR"	      
	      fi
              compile_d="-g -c -convert big_endian -assume byterecl -I. -FR -O0 -fpe0 -d1 -CB "
              link_d="-I.  "
              compile="$compile_common"
              compile2="-c -O3 -axKW -tpp7 -I. -w -w95 -i_dynamic -ip -convert big_endian -assume byterecl"
              link="-I.  "
              MODULE_CODE=1
            fi

	    
#           ------------------
#           flags for inlining
#           ------------------
            inline_objs="compare.o eosg.o discretize.o "
#           inline_objs=" "
            inline_files="compare.f eosg.f discretize.f "
#           inline_files=" "
            inline_flags=" "
#            inline_flags=" -Minline=size:10 -Minfo=inline $inline_files"
            preinline_flags="  "

	    
            ;;
	    	    
    CYGWIN32_NT)
	    mach_file="PGNT.F"
   
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d="blas90.a odepack.a"
            libs="blas90.a odepack.a"
	       
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link_d="-g"
            compile="-c -I. -I. -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            compile2="-c -I. -I. -byteswapio -Mnosave -Mrecursive -Mreentrant"
            link=" "
            MODULE_CODE=1

            ;;
	    
    CYGWIN_NT-4.0)
	    mach_file="PGNT.F"
   
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d="blas90.a odepack.a"
            libs="blas90.a odepack.a"
	       
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link_d="-g"
            compile="-c -I. -I$mpi_include -O -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            compile2="-c -I. -I$mpi_include -O1 -byteswapio -Mnosave -Mrecursive -Mreentrant"
            link=" "
            MODULE_CODE=1

            ;;
	    


      *) echo "Sorry, no support for operating system: $opsys"
         echo 
	 echo "modify  make_mfix   to add support"
	 echo
         exit ;;
    esac
#
#------------------------------------------------------------------------
#
echo
echo "Compiling with machine-dependent file $mach_file"
echo

# prepare for SMP version   
smp_check="COMPILED_SMP"
case $smp_version in
  y|Y )
            if test -f $smp_check
            then
	        echo
            else
                /bin/rm -f *.o *.a *.mod *.exe
                touch $smp_check
            fi
    ;;
  *)
            if test -f $smp_check
            then
                /bin/rm -f *.o *.a *.mod *.exe
                /bin/rm -f $smp_check
            else
	        echo
            fi
    ;;
esac

# prepare for DMP version   
dmp_check="COMPILED_DMP"
case $dmp_version in
  y|Y )
            if test -f $dmp_check
            then
	        echo
            else
                /bin/rm -f *.o *.a *.mod *.exe
                touch $dmp_check
            fi
    ;;
  *)
            if test -f $dmp_check
            then
                /bin/rm -f *.o *.a *.mod *.exe
                /bin/rm -f $dmp_check
            else
	        echo
            fi
    ;;
esac

#Prepare for the current machine	    
    mach_check="COMPILED.WITH.$mach_file"
    if test -f $mach_check
    then
       echo
    else
       chmod +w machine.f
       /bin/cp -f $mach_file machine.f
       /bin/rm -f *.o *.a *.mod *.exe
       /bin/rm -f COMPILED.WITH.*
       touch $mach_check
    fi


	    
    
# create default *.f and *.inc files in model directory, if they do not exist
  cd $run_dir
  echo
  echo "Ignore messages such as \"Cannot access *.f or *.inc\""
  for i in `ls *.f` 
  do
  
#   Is there a similar file in Mfix/model directory?
    if test -r $mfix/$i 
    then
       outfile=`echo $i | sed 's/\./\.0/'`
#      Is there default file Mfix/model directory?
       if test -r $mfix/$outfile
       then
          case $auto_compile in
             y|Y)
                  chmod u+w $outfile
                  /bin/cp -f $run_dir/$outfile $outfile
                  ;;
             *)
                  do_nothing="ok"
                  ;;
          esac
      
       else
#        Mfix/model directory does not have a default file. create one.
         /bin/cp -f $mfix/$i $mfix/$outfile
       fi
       
    fi
  done
  
  for i in `ls *.inc` 
  do
  
#   Is there a similar file in Mfix/model directory?
    if test -r $mfix/$i 
    then
       outfile=`echo $i | sed 's/\./\.0/'`
#      Is there default file Mfix/model directory?
       if test -r $mfix/$outfile
       then
          do_nothing="ok"
      
       else
#        Mfix/model directory does not have a default file. create one.
         /bin/cp -f $mfix/$i $mfix/$outfile
       fi
       
    else
      /bin/cp -f $i $mfix 
      echo "Using nonMfix include file: $i"
    fi
  done
  echo
#
#------------------------------------------------------------------------
#
# Loop through all *.0* files in mfix/model directory
  cd $mfix

  echo
  echo "Files from run directory used for making Mfix:"
  for i in `ls *.0*`
  do
  
#   The user has a corresponding file
    outfile=`echo $i | sed 's/\.0/\./'`
    if test -r $run_dir/$outfile 
    then
	echo "   $outfile"

#      User's file different from the .f or .inc file: copy user's file
       cmp -s $run_dir/$outfile  $outfile 
       if test $? = 0
       then
          case $auto_compile in
             y|Y)
                  chmod u+w $outfile
                  /bin/cp -f $run_dir/$outfile $outfile
                  ;;
             *)
                  do_nothing="ok"
                  ;;
          esac
       else
          chmod u+w $outfile
          /bin/cp -f $run_dir/$outfile $outfile
       fi


#   User does not have the corresponding file
    else

#     The .0f or .0inc file different from the .f or .inc file: copy *.0* file
       cmp -s $i $outfile
       if test $? = 0
       then
          /bin/rm -f $i
       else
          /bin/mv -f $i $outfile
	  touch $outfile
       fi

    fi
  done
  echo
  
#
#------------------------------------------------------------------------
#

  case $dmp_version in
  y|Y )
	echo
	echo -n '******************************************************'
	echo
	echo -n 'Preparing files for your dmp and/or smp compilation'
	echo
	echo -n '******************************************************'
	echo
    
    ;;
  *)
	echo
	echo -n '******************************************************'
	echo
	echo -n 'Preparing files for your serial/smp compilation'
	echo
	echo -n '******************************************************'
	echo
        /bin/cp -f mfix_l.make mfix_l_not.make
	ex mfix_l_not.make < dmp_modules/ex.commands
	/bin/cp -f mfix_u.make mfix_u_not.make
	ex mfix_u_not.make < dmp_modules/ex.commands

        cmp -s dmp_modules/compar_mod.f dmp_modules/mpi_donothing/compar_mod.f 
        if test $? = 0
        then
	 echo
        else
 	 /bin/cp -f dmp_modules/compar_mod.f dmp_modules/mpi_donothing/
        fi

        cmp -s dmp_modules/gridmap_mod.f dmp_modules/mpi_donothing/gridmap_mod.f 
        if test $? = 0
        then
	 echo
        else
         /bin/cp -f dmp_modules/gridmap_mod.f dmp_modules/mpi_donothing/
        fi
    ;;
  esac

#
#------------------------------------------------------------------------
#
# ISAT related modifications
  if [ $DO_ISAT -eq 0 ]
  then
     /bin/cp -fp chem/isat_donothing/* chem
  else
     /bin/cp -fp chem/isat_do/* chem
  fi
#
#------------------------------------------------------------------------
#

#make_mfix:
  case $smp_version in
  y|Y )
    mp_flag="$omp"
    ;;
  *)
    mp_flag=" "
    ;;
  esac

  case $dbg_version in
  y|Y )
    echo
    echo "Execution may be SLOW.  Do not use debug version for production runs!"
    FORT_FLAGS="$mp_flag $compile_d"
    FORT_FLAGS2="$mp_flag $compile_d"
    LINK_FLAGS="$mp_flag $link_d"
    LIB_FLAGS="$libs_d"
    ;;
  *)
    FORT_FLAGS="$mp_flag $compile $preinline_flags"
    FORT_FLAGS2="$mp_flag $compile2 $preinline_flags"
    LINK_FLAGS="$mp_flag $link"
    LIB_FLAGS="$libs"
    ;;
  esac

  echo "\n Compiling inline files . . ."
  
  export FORT_FLAGS
  export FORT_FLAGS2
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD
  if [ "$USE_TAU" ]
  then  
    export USE_TAU
  fi
 
#------------------------------------------------------------------------
#   T A U  P e r f o r m a n c e   P r o f i l i n g   directives
#------------------------------------------------------------------------
#

  if [ "$USE_TAU" ]
  then
    echo " "
    echo "************************************************************************"
    echo "Preparing for parsing source code and automatic instrumentation with TAU"
    echo "************************************************************************"  
    inst_moved=0
    miss_dir=0
  #----
  # Check if TAU directory is valid or not  
  #----
     if test -d "$TAUROOTDIR"
     then
        echo
	export TAUROOTDIR
     else
        echo 
        echo "TAU directory $TAUROOTDIR can not be found."
     echo "Please set TAUROOTDIR environment variable at the top of"
     echo "model/make_mfix file to a valid path. Aborting compilation."
     echo
     exit
     fi
  #----
  # Check if PDToolkit directory is valid or not
  #----
     if test -d "$PDTROOTDIR"
     then
        echo
	export PDTROOTDIR
     else
        echo 
        echo "PDToolkit directory $PDTROOTDIR can not be found."
        echo "Please set PDTROOTDIR environment variable at the top of"
        echo "model/make_mfix file to a valid path. Aborting compilation."
        echo
        exit
     fi
   #----
   # Create the directive and environment variable block for TAU specific settings
   #----
     OUTfile=tausettings
     echo "ifdef USE_TAU" > $OUTfile
     echo "  include \$(TAUROOTDIR)/include/Makefile" >> $OUTfile 
     echo "  MYOPTIONS=-optVerbose -optKeepFiles -optPDBFile=mfix_merged.pdb -optTauSelectFile=select.tau " >> $OUTfile
     echo "  FORTRAN_CMD=\$(TAU_COMPILER) \$(MYOPTIONS) \$(TAU_F90)" >> $OUTfile
     echo "  FORTRAN77_CMD=\$(TAU_COMPILER) \$(MYOPTIONS) \$(TAU_F90)" >> $OUTfile
     echo "  LINK_CMD=\$(FORTRAN_CMD)" >> $OUTfile
     echo "  LIB_FLAGS = -lm" >> $OUTfile                    
     echo "  LINK_FLAGS =" >> $OUTfile    
     echo "endif" >> $OUTfile    
     echo " " >> $OUTfile                   


   SRCDIR=.
   
   #----
   # Create the select.tau for selecting the routines for TAU_instrumentor
   #----
   if test -r $SRCDIR/select.tau
   then   
     echo " "
     echo " *******"
     echo " * select.tau file for TAU_instrumentor found, excluding the files"   
     echo " * and subroutines listed in select.tau for instrumentation"        
     echo " *******"
     echo " "
   else
     SELfile=select.tau
     echo "# Selective instrumentation: Specify an exclude/include list of routines/files." > $SELfile
     echo "#BEGIN_EXCLUDE_LIST" >> $SELfile
     echo "#void quicksort(int *, int, int)" >> $SELfile
     echo "#void interchange(int *, int *)" >> $SELfile
     echo "#END_EXCLUDE_LIST" >> $SELfile               
     echo "# " >> $SELfile
     echo "# If an include list is specified, the routines in the list will be the only" >> $SELfile          
     echo "# routines that are instrumented." >> $SELfile          
     echo "# To specify an include list ( a list of routines that will be instrumented)" >> $SELfile          
     echo "# remove the leading # to uncomment the following lines" >> $SELfile          
     echo "#BEGIN_INCLUDE_LIST" >> $SELfile                    
     echo "#int main(int, char **)" >> $SELfile          
     echo "#int select_" >> $SELfile          
     echo "#END_INCLUDE_LIST" >> $SELfile          
     echo "# " >> $SELfile          
     echo "# TAU also accepts file include/exclude lists that may be specified with" >> $SELfile          
     echo "# wildcard characters (* and ?) to exclude/include routines in specific files." >> $SELfile          
     echo "# These options may be used in conjunction with the routine include/exclude" >> $SELfile          
     echo "# lists as shown above. Uncomment the # to make the rule active." >> $SELfile          
     echo "# " >> $SELfile          
     echo "#" >> $SELfile          
     echo "#====================================================================" >> $SELfile          
     echo "# EITHER INCLUDE OR EXCLUDE LISTS SHOULD BE SPECIFIED, BUT NOT BOTH.!!!!!" >> $SELfile          
     echo "#====================================================================" >> $SELfile          
     echo "#BEGIN_FILE_INCLUDE_LIST" >> $SELfile          
     echo "#Main.cpp" >> $SELfile          
     echo "#Foo?.c" >> $SELfile          
     echo "#*.C" >> $SELfile               
     echo "#adjust_a_u_g.f" >> $SELfile          
     echo "#END_FILE_INCLUDE_LIST" >> $SELfile          
     echo "# Instruments routines in Main.cpp, Foo?.c and *.C files only" >> $SELfile          
     echo "#" >> $SELfile          
     echo "# Use BEGIN_[FILE]_INCLUDE_LIST with END_[FILE]_INCLUDE_LIST" >> $SELfile          
     echo "BEGIN_FILE_EXCLUDE_LIST" >> $SELfile          
     echo "#f*.c" >> $SELfile          
     echo "#impl?.C" >> $SELfile          
     echo "#calc_d.f" >> $SELfile          
     echo "#leq_bicgs.f" >> $SELfile          
     echo "#vf_gs_x.f" >> $SELfile          
     echo "#vf_gs_y.f" >> $SELfile          
     echo "#vf_gs_z.f" >> $SELfile          
     echo "END_FILE_EXCLUDE_LIST" >> $SELfile          
     echo "# excludes files f*.c and impl?.C (such as implA.C, foo.c)." >> $SELfile          
     echo " " >> $SELfile
   fi          
                         

   
 #----
 # Check if mfix_merged.pdb exists and user still wants to run the parser
 #----
   parse_contin=y
   if test -r $SRCDIR/mfix_merged.pdb
   then
     echo " "
     echo " *******"
     echo " * Resultant file from previous PDToolkit parsing was found: $SRCDIR/mfix_merged.pdb"
      ls -als $SRCDIR/mfix_merged.pdb
      echo " * Continuing with parsing will overwrite the existing file,"
      echo -n " * Do you want to continue? (y/n) [no]"
      read parse_contin
      echo " "
      echo $parse_contin
    fi
      case $parse_contin in
        y|Y )
       # Inform user if overwriting an existing *.pdb else print nothing
          if test -r $SRCDIR/mfix_merged.pdb
          then
            echo " * Overwriting the previously generated mfix_merged.pdb"
          fi
       #----
       # Check if any TAU instrumented file (*.inst.f) exists in the source directory 
       # before attempting to parse with PDToolkit parser
       #----
          for i in `ls *.f`
          do
            outfile=`echo $i | sed 's/\./\.inst./'`              
            if test -r $SRCDIR/$outfile
            then
	      echo " "
              echo "   !-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!"
              echo "    TAU instrumented file found in source directory: $SRCDIR/$outfile"
	      echo "   Temporarily moving all instrumented files (*.inst.f) to "
	      echo "   $SRCDIR/inst_files_temporary before running PDT parser"
              echo "   !-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!"	   
   	      echo " "
         #----
         # Create a temporary location to store the *.inst.f files during parsing
         #----
              if test -d $SRCDIR/inst_files_temporary
              then
	        touch $SRCDIR/inst_files_temporary
	      else
	        mkdir $SRCDIR/inst_files_temporary
	      fi
         #----
	 # Move the previously instrumented files (*.inst.f) to temporary location
         #----
	      mv $SRCDIR/*.inst.f $SRCDIR/inst_files_temporary
	      mv $SRCDIR/*.inst.F $SRCDIR/inst_files_temporary
	      inst_moved=1	   
	    fi
	    break
          done

     #----
     # Parse all of source files for building MFIX to generate mfix_merged.pdb
     #----
          echo " "
          echo " *******"
          echo " * Checking subdirectories before parsing"
          if test -d $SRCDIR/dmp_modules
          then     
            echo " *   model/dmp_modules found"
          else
            echo "  Missing model/dmp_modules directory! Abort compilation"
	    miss_dir=1
	    break
          fi
          if test -d $SRCDIR/des
          then     
            echo " *   model/des found"
          else
            echo "  Missing model/des directory! Abort compilation"
	    miss_dir=1
	    break
          fi       
          if test $miss_dir = 0
          then
            $PDTROOTDIR/linux/bin/f95parse -I$SRCDIR -I$SRCDIR/des \
              $SRCDIR/*.f $SRCDIR/dmp_modules/*.f $SRCDIR/des/*.f -R free \
             -o$SRCDIR/mfix_merged.pdb        
          fi
       ;;
        n|N )
           echo " * Keeping the previously generated mfix_merged.pdb"
       ;;         
        *)
           echo " * Keeping the previously generated mfix_merged.pdb"     
       ;;
      esac
     echo " *******"
    #---- 
    # Move back the TAU instrumented files (*.inst.f) from the temporary location
    # and remove the temporary directory created for storing these files during parsing
    #----
     if test $inst_moved = 1
     then
      mv $SRCDIR/inst_files_temporary/*.inst.f $SRCDIR
      mv $SRCDIR/inst_files_temporary/*.inst.F $SRCDIR
      rm -f -r $SRCDIR/inst_files_temporary    
     fi

     if test $miss_dir = 1
     then
       exit
     fi
#----
# Patch the mfix_?.make makefile with the necessary directives for TAU automatic instrumentation     
#----
  case $MODULE_CODE in
  0)
    NEWMakfile=$SRCDIR/mfix_u.make
    #
    # Check if the existing mfix_?.make already includes TAU directives or not
    if grep '^ifdef USE_TAU' $NEWMakfile >/dev/null ; then
      echo " "
      echo " " 
      echo " *******"
      echo " * Makefile $NEWMakfile already includes directives for TAU"
    else
      echo " "
      echo " " 
      echo " *******"
      echo " * Updating the makefile $NEWMakfile to include directives for TAU"
      cp -f -r $NEWMakfile $SRCDIR/mfix_u.make_ORG
      cat $OUTfile > $NEWMakfile
      cat $SRCDIR/mfix_u.make_ORG >> $NEWMakfile
      rm -f -r $SRCDIR/$OUTfile
    fi
   ;;
  1)
    NEWMakfile=$SRCDIR/mfix_l.make
    if grep '^ifdef USE_TAU' $NEWMakfile >/dev/null ; then 
      echo " "
      echo " " 
      echo " *******"
      echo " * Makefile $NEWMakfile already includes directives for TAU"
    else
      echo " "
      echo " " 
      echo " *******"
      echo " * Updating the makefile $NEWMakfile to include directives for TAU"
      cp -f -r $NEWMakfile $SRCDIR/mfix_l.make_ORG
      cat $OUTfile > $NEWMakfile
      cat $SRCDIR/mfix_l.make_ORG >> $NEWMakfile
      rm -f -r $SRCDIR/$OUTfile
    fi
   ;;
  esac
  fi
  echo " *******"
  echo " "
# ----------------------------------
# End of TAU related modifications
# ----------------------------------
  case $MODULE_CODE in
  0)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_u.make $inline_objs"
   	    make -f mfix_u.make $inline_objs
   	 ;;
  	*)
   	    echo "make -f mfix_u_not.make $inline_objs"
   	    make -f mfix_u_not.make $inline_objs
   	 ;;
  	esac
   ;;
  1)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_l.make $inline_objs"
   	    make -f mfix_l.make $inline_objs
   	 ;;
  	*)
   	    echo "make -f mfix_l_not.make $inline_objs"
   	    make -f mfix_l_not.make $inline_objs
   	 ;;
  	esac
   ;;
  esac


  case $smp_version in
  y|Y )
    mp_flag="$omp"
    ;;
  *)
    mp_flag=" "
    ;;
  esac

  case $dbg_version in
  y|Y )
    echo
    echo "Execution may be SLOW.  Do not use debug version for production runs!"
    FORT_FLAGS="$mp_flag $compile_d"
    FORT_FLAGS2="$mp_flag $compile_d"
    LINK_FLAGS="$mp_flag $link_d"
    LIB_FLAGS="$libs_d"
    ;;
  *)
    FORT_FLAGS="$mp_flag $compile $inline_flags"
    FORT_FLAGS2="$mp_flag $compile2 $inline_flags"
    LINK_FLAGS="$mp_flag $link"
    LIB_FLAGS="$libs"
    ;;
  esac

  echo "\nPlease wait . . ."
  
  export FORT_FLAGS
  export FORT_FLAGS2
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD
  if [ "$USE_TAU" ]
  then  
    export USE_TAU
  fi
 
  case $MODULE_CODE in
  0)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_u.make mfix.exe"
   	    make -f mfix_u.make mfix.exe
   	 ;;
  	*)
   	    echo "make -f mfix_u_not.make mfix.exe"
   	    make -f mfix_u_not.make mfix.exe
   	 ;;
  	esac
   ;;
  1)
  	case $dmp_version in
  	y|Y )
   	    echo "make -f mfix_l.make mfix.exe"
   	    make -f mfix_l.make mfix.exe
   	 ;;
  	*)
   	    echo "make -f mfix_l_not.make mfix.exe"
   	    make -f mfix_l_not.make mfix.exe
   	 ;;
  	esac
   ;;
  esac

  if test $? = 0
  then
    /bin/cp -f mfix.exe $run_dir
    echo

    case $dmp_version in
    y|Y )
        echo "********************************************************************"
        echo " Compilation successful: mfix.$vers created"
	echo " To run MFIX type (or equivalent): mpirun -np<# processors> mfix.exe"
        echo "********************************************************************"
      ;;
    *)
        echo "*******************************************"
        echo " Compilation successful: mfix.$vers created"
	echo " To run MFIX type: mfix.exe"
        echo "*******************************************"
      ;;
    esac

  else
    echo
    echo
    echo "*** File mfix.exe NOT created."
    echo 
  fi
  

cd $run_dir



