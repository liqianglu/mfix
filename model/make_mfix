#!/bin/bsh -f
#
# MFIX script file for obtaining user-defined files and
# executing 'make'
#  Usage:
#     1) on unix machines     :  sh    mfix/model/make_mfix
#     2) on NT using PGI bash :  bash  mfix/model/make_mfix
#
# M. Syamlal and P. Nicoletti                  9-27-94
#
vers="Version 4.1"
echo
echo 
echo "*******************************************"
echo "* Creating the MFIX-executable mfix.exe   *"
echo "*                $vers              *"
echo "*******************************************"
echo

#
# Get run directory name
#
set `pwd` ; run_dir=$1
#
#  Get path name to mfix directory and cd to mfix directory
#
mfix=`echo $0 | sed 's/\/make_mfix//'`
cd $mfix
set `pwd` ; mfix=$1

if test $mfix = $run_dir 
then
  echo "*** Execute this command from any directory other than the current directory!"
  echo "*** It is usually executed from a run directory containing user defined files."
  echo
  exit
fi


# get user input
echo
echo "MFIX directory is $mfix"
echo

echo -n "Do you need SMP version? (y/n) [no] "
read smp_version

echo
echo -n "Do you need DMP version? (y/n) [no] "
read dmp_version

echo
echo -n "Do you need debug version? (y/n) [no] "
read dbg_version

echo
echo -n "Force re-compilation of source files in run directory? (y/n) [no] "
read auto_compile
  
case $dmp_version in
  y|Y )

  mpi_include="/usr/include"

  echo
  echo -n "checking for mpif.h in the default directory $mpi_include"
            if test -f "$mpi_include/mpif.h"
            then
	        echo
                echo -n "using mpif.h from $mpi_include"
            else
	        echo
                echo -n "input the location of the directory where mpif.h resides: "
                read mpi_include
            fi
  ;;
  *)
  mpi_include="$mfix/dmp_modules/mpi_donothing"
  ;;
esac
ln -sf "$mpi_include/mpif.h" .

#
#------------------------------------------------------------------------
# Define machine dependent flags and copy machine dependent files
# Check whether the last compilation was on the same machine.
# Give a different name for each machine file (IRIXF90.F, ULTRIX.F, etc.)

    set `uname -s` ; opsys=$1
    
    case $opsys in

      OSF1)
            mach_file="OSF1.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="-lcxmlp -lmpi -lelan"
            libs="-lcxmlp -lmpi -lelan"

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-omp"
            compile_d="-c -I. -I$mpi_include -C -trapuv -g -free -nowarn -assume byterecl -convert big_endian "
            link_d="-C -g -nowarn -assume byterecl -convert big_endian"

            compile="-c -I. -I$mpi_include -O5 -fast -free -nowarn -assume byterecl -convert big_endian "
            compile2="-c -I. -I$mpi_include -O5 -fast  -free -nowarn -assume byterecl -convert big_endian "
            link="-O5 -fast -nowarn -assume byterecl -convert big_endian"
            MODULE_CODE=1
            ;;

      AIX)
            mach_file="AIX.F"

            case $dmp_version in
              y|Y )
                        FORTRAN_CMD=mpxlf90_r
                        LINK_CMD=mpxlf90_r
                ;;
              *)
                        FORTRAN_CMD=xlf90_r
                        LINK_CMD=xlf90_r
                ;;
            esac

            libs_d="-lblas "
            libs="-lblas -lesslp2_r"

            OBJ_EXT=o
            FORTRAN_EXT=f
            omp="-qsmp=omp -qsmp=noauto -qnosave"
            compile_d="-q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -c -I. -I$mpi_include -C -g -pg -qinitauto=FF -qflttrap -freeform"
            link_d="-q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -C -g -pg -qinitauto=FF -qflttrap"

            compile="-c -I. -I$mpi_include -O3 -qstrict -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -qarch=pwr3 -qtune=pwr3 -qcache=auto -freeform "
            compile2="-c -I. -I$mpi_include -O3 -qstrict -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -qarch=pwr3 -qtune=pwr3 -qcache=auto -freeform "
            link="-O3 -qstrict -qarch=pwr3 -q32 -bmaxstack:2000000000 -bmaxdata:2000000000 -qtune=pwr3 -qcache=auto "
            MODULE_CODE=1
            ;;

    
      IRIX64) 
	    mach_file="IRIXF90.F"

            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d="-lblas -lmpi"
            libs="-lblas -lmpi"
	      
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -I. -I$mpi_include -64 -C -trapuv -g -freeform -Inline:must:eosg,compare,phi_c_of,xsi"
            link_d="-64 -C -g"

            compile="-c -I. -I$mpi_include -64 -O3 -mips4 -freeform -Inline:must:eosg,compare,phi_c_of,xsi"
            compile2="-c -I. -I$mpi_include -64 -O3 -mips4 -freeform -Inline:must:eosg,compare,phi_c_of,xsi"
            link="-64 -O3 -mips4"
            MODULE_CODE=0
            ;;
	    
      ULTRIX) 
	    mach_file="ULTRIX.F"
  
            FORTRAN_CMD=f90
            LINK_CMD=f90
            libs_d=blas90.a
            libs=blas90.a
	       
            OBJ_EXT=o
            FORTRAN_EXT=f90
	    omp="?"
            compile_d="-c -I. -I$mpi_include -g -nowarn -freeform -convert big_endian"
            link_d="-g -nowarn -convert big_endian"
            compile="-c -I. -I$mpi_include -nowarn -O2 -freeform -convert big_endian"
            compile2="-c -I. -I$mpi_include -nowarn -O2 -freeform -convert big_endian"
            link="-O2 -nowarn -convert big_endian"
            MODULE_CODE=0
	    
            ;;
             

    Linux)
	    mach_file="LINUX.F"
	    
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d=blas90.a
            libs=blas90.a
    
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -I. -I$mpi_include -Minline=eosg,compare,phi_c_of,xsi -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
#            link_d="-Mprof=func -g -L/usr/local/MPI/mpich/lib/LINUX/ch_p4 -lmpich"
            link_d=" -L/usr/lib -lmpi"
            compile=" -O -I. -I$mpi_include -Minline=eosg,compare,phi_c_of,xsi -c -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant "
            compile2="-O1 -I. -I$mpi_include -Minline=eosg,compare,phi_c_of,xsi -c -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
#            link=" -L/usr/local/MPI/mpich/lib/LINUX/ch_p4 -lmpich"
            link=" -L/usr/lib -lmpi"
            MODULE_CODE=1
	    

            ;;
	    
	    
    CYGWIN32_NT)
	    mach_file="PGNT.F"
   
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d=blas90.a
            libs=blas90.a
	       
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link_d="-g"
            compile="-c -I. -I. -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            compile2="-c -I. -I. -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link=" "
            MODULE_CODE=1

            ;;
	    
    CYGWIN_NT-4.0)
	    mach_file="PGNT.F"
   
            FORTRAN_CMD=pgf90
            LINK_CMD=pgf90
            libs_d=blas90.a
            libs=blas90.a
	       
            OBJ_EXT=o
            FORTRAN_EXT=f
	    omp="-mp"
            compile_d="-c -g -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link_d="-g"
            compile="-c -I. -I$mpi_include -O -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            compile2="-c -I. -I$mpi_include -O1 -byteswapio -Mfreeform -Mnosave -Mrecursive -Mreentrant"
            link=" "
            MODULE_CODE=1

            ;;
	    


      *) echo "Sorry, no support for operating system: $opsys"
         echo 
	 echo "modify  make_mfix   to add support"
	 echo
         exit ;;
    esac
#
#------------------------------------------------------------------------
#
echo
echo "Compiling with machine-dependent file $mach_file"
echo

# prepare for SMP version   
smp_check="COMPILED_SMP"
case $smp_version in
  y|Y )
            if test -f $smp_check
            then
	        echo
            else
                rm *.o *.a *.mod *.exe
                touch $smp_check
            fi
    ;;
  *)
            if test -f $smp_check
            then
                rm *.o *.a *.mod *.exe
                rm $smp_check
            else
	        echo
            fi
    ;;
esac

# prepare for DMP version   
dmp_check="COMPILED_DMP"
case $dmp_version in
  y|Y )
            if test -f $dmp_check
            then
	        echo
            else
                rm *.o *.a *.mod *.exe
                touch $dmp_check
            fi
    ;;
  *)
            if test -f $dmp_check
            then
                rm *.o *.a *.mod *.exe
                rm $dmp_check
            else
	        echo
            fi
    ;;
esac

#Prepare for the current machine	    
    mach_check="COMPILED.WITH.$mach_file"
    if test -f $mach_check
    then
       echo
    else
       chmod +w machine.f
       cp $mach_file machine.f
       rm *.o *.a *.mod *.exe
       rm COMPILED.WITH.*
       touch $mach_check
    fi


	    
    
# create default *.f and *.inc files in model directory, if they do not exist
  cd $run_dir
  echo
  echo "Ignore messages such as \"Cannot access *.f or *.inc\""
  for i in `ls *.f` 
  do
  
#   Is there a similar file in Mfix/model directory?
    if test -r $mfix/$i 
    then
       outfile=`echo $i | sed 's/\./\.0/'`
#      Is there default file Mfix/model directory?
       if test -r $mfix/$outfile
       then
          case $auto_compile in
             y|Y)
                  chmod u+w $outfile
                  cp $run_dir/$outfile $outfile
                  ;;
             *)
                  do_nothing="ok"
                  ;;
          esac
      
       else
#        Mfix/model directory does not have a default file. create one.
         cp $mfix/$i $mfix/$outfile
       fi
       
    fi
  done
  
  for i in `ls *.inc` 
  do
  
#   Is there a similar file in Mfix/model directory?
    if test -r $mfix/$i 
    then
       outfile=`echo $i | sed 's/\./\.0/'`
#      Is there default file Mfix/model directory?
       if test -r $mfix/$outfile
       then
          do_nothing="ok"
      
       else
#        Mfix/model directory does not have a default file. create one.
         cp $mfix/$i $mfix/$outfile
       fi
       
    else
      cp $i $mfix 
      echo "Using nonMfix include file: $i"
    fi
  done
  echo
#
#------------------------------------------------------------------------
#
# Loop through all *.0* files in mfix/model directory
  cd $mfix

  echo
  echo "Files from run directory used for making Mfix:"
  for i in `ls *.0*`
  do
  
#   The user has a corresponding file
    outfile=`echo $i | sed 's/\.0/\./'`
    if test -r $run_dir/$outfile 
    then
	echo "   $outfile"

#      User's file different from the .f or .inc file: copy user's file
       cmp -s $run_dir/$outfile  $outfile 
       if test $? = 0
       then
          case $auto_compile in
             y|Y)
                  chmod u+w $outfile
                  cp $run_dir/$outfile $outfile
                  ;;
             *)
                  do_nothing="ok"
                  ;;
          esac
       else
          chmod u+w $outfile
          cp $run_dir/$outfile $outfile
       fi


#   User does not have the corresponding file
    else

#     The .0f or .0inc file different from the .f or .inc file: copy *.0* file
       cmp -s $i $outfile
       if test $? = 0
       then
          rm $i
       else
          mv $i $outfile
	  touch $outfile
       fi

    fi
  done
  echo
  
#
#------------------------------------------------------------------------
#

  case $dmp_version in
  y|Y )
	echo
	echo -n '******************************************************'
	echo
	echo -n 'Preparing files for your dmp and/or smp compilation'
	echo
	echo -n '******************************************************'
	echo
    
    ;;
  *)
	echo
	echo -n '******************************************************'
	echo
	echo -n 'Preparing files for your serial/smp compilation'
	echo
	echo -n '******************************************************'
	echo
        cp mfix_l.make mfix_l_not.make
	ex mfix_l_not.make < dmp_modules/ex.commands
	cp mfix_u.make mfix_u_not.make
	ex mfix_u_not.make < dmp_modules/ex.commands

        cmp -s dmp_modules/compar_mod.f dmp_modules/mpi_donothing/compar_mod.f 
        if test $? = 0
        then
	 echo
        else
 	 cp dmp_modules/compar_mod.f dmp_modules/mpi_donothing/
        fi

        cmp -s dmp_modules/gridmap_mod.f dmp_modules/mpi_donothing/gridmap_mod.f 
        if test $? = 0
        then
	 echo
        else
         cp dmp_modules/gridmap_mod.f dmp_modules/mpi_donothing/
        fi
    ;;
  esac

#
#------------------------------------------------------------------------
#

#make_mfix:
  case $smp_version in
  y|Y )
    mp_flag="$omp"
    ;;
  *)
    mp_flag=" "
    ;;
  esac

  case $dbg_version in
  y|Y )
    echo
    echo "Execution may be SLOW.  Do not use debug version for production runs!"
    FORT_FLAGS="$mp_flag $compile_d"
    FORT_FLAGS2="$mp_flag $compile_d"
    LINK_FLAGS="$mp_flag $link_d"
    LIB_FLAGS="$libs_d"
    ;;
  *)
    FORT_FLAGS="$mp_flag $compile"
    FORT_FLAGS2="$mp_flag $compile2"
    LINK_FLAGS="$mp_flag $link"
    LIB_FLAGS="$libs"
    ;;
  esac

  echo "\nPlease wait . . ."
  
  export FORT_FLAGS
  export FORT_FLAGS2
  export LINK_FLAGS
  export LIB_FLAGS
  export OBJ_EXT
  export FORTRAN_EXT
  export FORTRAN_CMD
  export LINK_CMD
        
 
  case $MODULE_CODE in
  0)
  	case $dmp_version in
  	y|Y )
   	    make -f mfix_u.make
   	 ;;
  	*)
   	    make -f mfix_u_not.make
   	 ;;
  	esac
   ;;
  1)
  	case $dmp_version in
  	y|Y )
   	    make -f mfix_l.make
   	 ;;
  	*)
   	    make -f mfix_l_not.make
   	 ;;
  	esac
   ;;
  esac

  if test $? = 0
  then
    cp mfix.exe $run_dir
    echo
    echo 
    echo "*******************************************"
    echo "* Compilation successful: mfix.exe created*"
    echo "*              $vers                *"
    echo "*******************************************"
    echo 
  else
    echo
    echo
    echo "*** File mfix.exe NOT created."
    echo 
  fi
  

cd $run_dir



